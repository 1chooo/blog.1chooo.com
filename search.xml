<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我在 Conda 常用的指令</title>
    <url>/2023/07/30/dev-env/conda-dev-env/</url>
    <content><![CDATA[<blockquote>
<p>每次用 Conda 都要在搜尋一次嗎？以後就看這篇吧！</p>
</blockquote>
<p>相信有在透過 Python 開發的朋友，對 Python 環境的設置各有喜好，而有些時候相對應的專案會需要不同的環境需求，而這時 Conda 會是很好的夥伴，不過常常在使用 Conda 的時候，常常會不知道指令是什麼，因此每次需要使用的時候必須要上網查詢，如此便多了一些步驟，如此在日常工作流程便會受到限制，因此本篇會介紹一些 Conda 常被使用的 Command 指令，讓日常的工作更為順暢。</p>
<h3 id="建立、刪除和複製虛擬環境"><a href="#建立、刪除和複製虛擬環境" class="headerlink" title="建立、刪除和複製虛擬環境"></a>建立、刪除和複製虛擬環境</h3><h4 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create -n your_env_name python=x.x.x                    <span class="comment"># 直接建立 python 版本為 x.x.x 的虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create -n your_env_name matplotlib numpy python=x.x.x   <span class="comment"># 建立虛擬環境同時一併安裝想要的 package (ex: numpy, matplotlib)</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="刪除虛擬環境"><a href="#刪除虛擬環境" class="headerlink" title="刪除虛擬環境"></a>刪除虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda deactivate                                  <span class="comment"># 首先必須先退出虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove -n your_env_name --all               <span class="comment"># 再來得以完整刪除虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove --name your_env_name package_name    <span class="comment"># 只刪除虛擬環境特定 package</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="複製虛擬環境"><a href="#複製虛擬環境" class="headerlink" title="複製虛擬環境"></a>複製虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create new_env_name --<span class="built_in">clone</span> old_env_name    <span class="comment"># 透過舊環境名稱，將原有虛擬環境的內容複製，進而生成新虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create new_env_name --<span class="built_in">clone</span> old_env_path    <span class="comment"># 透過舊環境路徑，將原有虛擬環境的內容複製，進而生成新虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="激活與退出虛擬環境"><a href="#激活與退出虛擬環境" class="headerlink" title="激活與退出虛擬環境"></a>激活與退出虛擬環境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate your_env_name    <span class="comment"># 激活目標虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda deactivate                <span class="comment"># 退出目標虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="安裝及刪除需要的-package-至虛擬環境"><a href="#安裝及刪除需要的-package-至虛擬環境" class="headerlink" title="安裝及刪除需要的 package 至虛擬環境"></a>安裝及刪除需要的 package 至虛擬環境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda install -n your_env_name package_name   <span class="comment"># 在目標的虛擬環境中安裝特定 package</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove -n your_env_name package_name    <span class="comment"># 在目標的虛擬環境中刪除特定 package</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="查詢虛擬環境資訊"><a href="#查詢虛擬環境資訊" class="headerlink" title="查詢虛擬環境資訊"></a>查詢虛擬環境資訊</h3><ul>
<li><h4 id="若想要更新-conda-之版本"><a href="#若想要更新-conda-之版本" class="headerlink" title="若想要更新 conda 之版本"></a>若想要更新 conda 之版本</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda update conda    <span class="comment"># 升級當前 conda 之版本</span></span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><h4 id="查看已安裝的-Conda-版本"><a href="#查看已安裝的-Conda-版本" class="headerlink" title="查看已安裝的 Conda 版本"></a>查看已安裝的 Conda 版本</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda --version   <span class="comment"># 第一種方法</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda -V          <span class="comment"># 第二種方法</span></span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><h4 id="查看當前已建立環境列表"><a href="#查看當前已建立環境列表" class="headerlink" title="查看當前已建立環境列表"></a>查看當前已建立環境列表</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> list    <span class="comment"># 第一種方法</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda info -e     <span class="comment"># 第二種方法</span></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="查看在當前環境已安裝的-package"><a href="#查看在當前環境已安裝的-package" class="headerlink" title="查看在當前環境已安裝的 package"></a>查看在當前環境已安裝的 package</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda list  <span class="comment"># 顯示當前虛擬環境已安裝的 package</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="導出虛擬環境"><a href="#導出虛擬環境" class="headerlink" title="導出虛擬環境"></a>導出虛擬環境</h3><p>透過 conda 的 export 導出 .yaml 的檔案格式，將虛擬環境名稱、位址、已安裝的 package 記錄下來。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; ~/env.yaml                       <span class="comment"># 將虛擬環境名稱、位址、已安裝的 package，輸出至 ~/env.yaml</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; your_goal_path/environment.yaml  <span class="comment"># 將虛擬環境名稱、位址、已安裝的 package，輸出至目標的路徑中</span></span></span><br></pre></td></tr></table></figure></div>

<p>接著也可以透過導出的 <code>.yaml</code> 創建新虛擬環境</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f ~/env.yaml                      <span class="comment"># 透過 ~/env.yaml 的資訊，建立新虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f your_goal_path/environment.yaml <span class="comment"># 透過目標的路徑中的 environment.yaml 的資訊，建立新虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="文末小結"><a href="#文末小結" class="headerlink" title="文末小結"></a>文末小結</h3><p>上述大多為平常使用 conda 虛擬環境常用之操作，而在文末，為不讓本篇文章看似單就普通說明書，接下來就來分享自己平時在使用 conda 虛擬環境的一些小習慣吧！我們話不多說，先上一張圖片吧！</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*HINgY65FwzLssf65NsA8tQ.png"
                      alt="每次激活環境時的操作" title="每次激活環境時的操作"
                ><figcaption>每次激活環境時的操作</figcaption></figure></p>
<p>雖然是虛擬環境，可以隨時建立查看，發生錯誤也能立馬砍掉不影響其他操作進行，不過有些時候常常就因為存在太多已建立的環境，而導致混亂而發生錯誤，導致又要多花時間 Debug，所以每次我在使用虛擬環境前都會先檢查一些基本的資訊。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda --version               <span class="comment"># 檢查當前 conda 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> list                <span class="comment"># 查看當前已建立的所有虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate your_env_name  <span class="comment"># 激活目標的虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> python                  <span class="comment"># 檢查 python 的路徑是否存在虛擬環境下</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 --version             <span class="comment"># 檢查當前虛擬環境下的 python 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda list                    <span class="comment"># 檢查當前虛擬環境下的 package</span></span></span><br></pre></td></tr></table></figure></div>
<p>搭配了這些小習慣，讓我在使用虛擬環境時，比較不容易發生 call 錯環境的情形發生，也讓我在使用虛擬環境時更為順手。相信大家有了這些 conda 的常用 command，無論是工作中、研究中、日常興趣中，使用虛擬環境都能更為順手，增加工作效率。</p>
<p>若是還想要我再補充更多 conda 的操作，或是其他開發環境的建立，都歡迎留言一起討論哦～</p>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#x68;&#117;&#x67;&#x6f;&#x39;&#x37;&#48;&#x32;&#x31;&#55;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#x6d;" >&#x68;&#117;&#x67;&#x6f;&#x39;&#x37;&#48;&#x32;&#x31;&#55;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevEnv</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>venv</tag>
        <tag>conda</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Mac 安裝 Node.js &amp; NPM</title>
    <url>/2024/01/03/dev-env/mac-install-nodejs-npm/</url>
    <content><![CDATA[<p>新年剛好把 MacOS 重灌，讓這台老 macbook pro 2020 重獲新生，也藉此機會重新建置開發環境。</p>
<p>因此我們將示範如何在 Mac 安裝 <code>Node.js</code> 以及 <code>NPM</code>，其實直接從官網安裝 <code>Node.js</code> 時就會同時安裝 <code>NPM</code>，因此我將以 Mac 作為示範如何在成功安裝 <code>Node.js</code>，並且展示成功結果！</p>
<p>👉🏻 <a class="link"   href="https://nodejs.org/en?source=post_page-----3d7101d998f4--------------------------------" >Node.js 官網連結 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="下載-LTS-的版本"><a href="#下載-LTS-的版本" class="headerlink" title="下載 LTS 的版本"></a>下載 LTS 的版本</h4><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*aREalwTkLM8kSMAokcCBvw.png"
                      alt="選擇 LTS 版本"
                ><figcaption>選擇 LTS 版本</figcaption></figure></p>
<h4 id="點擊下載的-node-vx-x-x-pkg-檔安裝-Node-js"><a href="#點擊下載的-node-vx-x-x-pkg-檔安裝-Node-js" class="headerlink" title="點擊下載的 node-vx.x.x.pkg 檔安裝 Node.js"></a>點擊下載的 <code>node-vx.x.x.pkg</code> 檔安裝 <code>Node.js</code></h4><p>緊接著就是點擊 MacOS 安裝的一堆確認（建議安裝時可以看一下細節！）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*dAvr0F9ceBHDgU7PCeDGtA.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*62YZY321G_LxvvFvHNiblA.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*jpdJaKgGK14D8H1ypSuQ3g.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*PNhmDNjLvukKMrVKwQhjRg.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*F8rHXI-ZTIJkwpb9G6aGWw.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*IaKki0SZuybAVHPCev-G-g.png"
                     
                ></p>
<h4 id="成功安裝後我們回到-Terminal"><a href="#成功安裝後我們回到-Terminal" class="headerlink" title="成功安裝後我們回到 Terminal"></a>成功安裝後我們回到 Terminal</h4><p>安裝成功後，我們可以透過 Terminal 使用 <code>which</code> 確認是否安裝成功，可以試著在 Terminal 輸入以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> npm</span><br><span class="line">/usr/local/bin/npm</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">which</span> node</span><br><span class="line">/usr/local/bin/node</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wWCsxVfJS98KftYNcypWhg.png"
                      alt="有成功回傳路徑就是成功！"
                ><figcaption>有成功回傳路徑就是成功！</figcaption></figure></p>
<h4 id="輸入-node-npm-Command"><a href="#輸入-node-npm-Command" class="headerlink" title="輸入 node &amp; npm Command"></a>輸入 node &amp; npm Command</h4><p>我們可以就在 Terminal 做 <code>node</code> &amp; <code>npm</code> 的 command 啦！</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*P_rTeMsh4tUrbfbdR4KkNw.png"
                      alt="node command"
                ><figcaption>node command</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1000/format:webp/1*YGQ7GD9BDgk49o0Y14hItQ.png"
                      alt="npm command"
                ><figcaption>npm command</figcaption></figure></p>
<h4 id="啟動一個-web-server"><a href="#啟動一個-web-server" class="headerlink" title="啟動一個 web server"></a>啟動一個 web server</h4><p>我們可以另外寫一個 web server 的 app 來測試一下，這邊我們使用 <code>http</code> 來啟動一個 web server，實作程式碼如下：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&#x27;localhost&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>接著我們透過 <code>node</code> 來啟動這個 web server，輸入以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ node server.js</span><br><span class="line">Server running at http://localhost:3000/</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*RKp-Y_Tet-mljSanTCKfcw.png"
                      alt="run the server"
                ><figcaption>run the server</figcaption></figure></p>
<p>接著我們前往瀏覽器點開 <code>http://localhost:3000/</code>，就可以看到 <code>Hello World</code> 的字串啦！結果如下圖，如果有看到 <code>Hello World</code> 就代表我們完全成功啦！</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1JkRsWl-n7Gex7hsnbb7xA.png"
                      alt="Hello World !!!"
                ><figcaption>Hello World !!!</figcaption></figure></p>
<p>這樣就大功告成啦！祝大家開發順利！也祝大家新年快樂！</p>
<p>同場加映如何在 MacOS 上撰寫 TypeScripts 的 React</p>
<h4 id="Install-the-react-native-CLI"><a href="#Install-the-react-native-CLI" class="headerlink" title="Install the react-native CLI"></a>Install the react-native CLI</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g react-native-cli</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>DevEnv</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>npm</tag>
        <tag>Mac</tag>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解決 npm install 時報錯 - Error: EACCES: permission denied</title>
    <url>/2024/05/15/dev-env/node-access-error/</url>
    <content><![CDATA[<p>在我們安裝 npm 套件的時候，有時候會遇到 <code>EACCES: permission denied</code> 的錯誤，這是因為我們沒有權限寫入到指定的目錄，我們會看到以下錯誤（以安裝 aws-cdk 為例）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g aws-cdk</span><br><span class="line"></span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! syscall <span class="built_in">mkdir</span></span><br><span class="line">npm ERR! path /usr/local/lib/node_modules/aws-cdk</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! Error: EACCES: permission denied, <span class="built_in">mkdir</span> <span class="string">&#x27;/usr/local/lib/node_modules/aws-cdk&#x27;</span></span><br><span class="line">npm ERR!  [Error: EACCES: permission denied, <span class="built_in">mkdir</span> <span class="string">&#x27;/usr/local/lib/node_modules/aws-cdk&#x27;</span>] &#123;</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: <span class="string">&#x27;EACCES&#x27;</span>,</span><br><span class="line">npm ERR!   syscall: <span class="string">&#x27;mkdir&#x27;</span>,</span><br><span class="line">npm ERR!   path: <span class="string">&#x27;/usr/local/lib/node_modules/aws-cdk&#x27;</span></span><br><span class="line">npm ERR! &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! The operation was rejected by your operating system.</span><br><span class="line">npm ERR! It is likely you <span class="keyword">do</span> not have the permissions to access this file as the current user</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! If you believe this might be a permissions issue, please double-check the</span><br><span class="line">npm ERR! permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the <span class="built_in">command</span> again as root/Administrator.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>: <span class="variable">$USER</span>/.npm/_logs/*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-env/node-access-error/01.png"
                      alt="EACCES: permission denied"
                ><figcaption>EACCES: permission denied</figcaption></figure></p>
<p>會發生的原因是因為我們沒有權限寫入到 <code>/usr/local/lib/node_modules</code> 目錄，這時候我們可以透過以下方式解決：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">chown</span> -R $(<span class="built_in">whoami</span>) /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-env/node-access-error/02.png"
                      alt="Add -R access"
                ><figcaption>Add -R access</figcaption></figure></p>
<p>我們在當前的 user 下，將 <code>/usr/local/lib/node_modules</code> 目錄的權限加上當前 user 的權限，這樣我們就可以在安裝 npm 套件的時候，不會遇到 <code>EACCES: permission denied</code> 的錯誤。</p>
<p>如此我們再重新輸入 <code>npm install</code> 的指令，就可以正常安裝套件了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g aws-cdk</span><br><span class="line"></span><br><span class="line">added 2 packages <span class="keyword">in</span> 1s</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-env/node-access-error/03.png"
                      alt="Install npm package again. It WORKED !!!"
                ><figcaption>Install npm package again. It WORKED !!!</figcaption></figure></p>
<p>如果我們不是要安裝 global 的套件，而是解決該專案當前的權限問題，我們可以透過以下方式解決：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">chown</span> -R $(<span class="built_in">whoami</span>) ~/.npm</span><br></pre></td></tr></table></figure></div>

<p>會導致這個問題是因為我們在安裝時 root 與 user 之間的權限問題，透過這個方式，我們就可以解決這個問題，祝大家在安裝 npm 套件的時候都能順利不衝突！</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://segmentfault.com/a/1190000018660227" >npm 在安装的时候提示 没有权限操作的解决办法 Error: EACCES: permission denied <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevEnv</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>npm</tag>
        <tag>permission</tag>
      </tags>
  </entry>
  <entry>
    <title>演算法第一講——Euclid Algorithm 歐幾里得演算法</title>
    <url>/2023/07/30/ds-alg/euclid/</url>
    <content><![CDATA[<p>大家在過往學習的經驗中，可能都有聽過歐幾里德這名鼎鼎大名的人物，是位在希臘化時期的數學家，有著著名著作「幾何原本」，在數學領域中有著極大化的貢獻，為現今眾多數學家所認同。</p>
<p>然而在古希臘的時代的數學家竟然能跟演算法畫上關係，畢竟演算法便是透過有限的步驟中，將給定的輸入做出最有效的解決，並且在執行玩這些有效的步驟中會有正當的終止，產生最後輸出結果，而歐幾里德演算法得以詮釋這些過程，歐幾里德演算法的問題是要在給定的兩個正整數 m 和 n 中找出兩束的最大公因數，因此我們可以列出以下解題步驟：</p>
<ol>
<li>找出餘數 (m % n)</li>
<li>判斷餘數是否為零 (if (r &#x3D; 0) return n)</li>
<li>被除數與餘數互換 (swap(m, n))</li>
</ol>
<p>那看到這邊可能人會有很多有很熟悉的感覺，畢竟我們曾經學習過求公因數的方法有：列舉法、質因數分解、短除法等⋯⋯那其中還有一個有趣的方法便是「輾轉相除法」，也就是我們今天要討論到的歐幾里德演算法，然而所謂的「輾轉」是什麼呢？可能是 Debug 睡不著的時候吧！哈！不過這樣也說得通，輾轉就是曲折的、不斷的過程，而我們正是透過這樣的特性來達成我們的演算法。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ZtKWx4DZ0FY6SBSctDWtUQ.png"
                      alt="輾轉相除法直式"
                ><figcaption>輾轉相除法直式</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GLbMrGYdxAAT-3Vee-vXDA.png"
                      alt="輾轉過程"
                ><figcaption>輾轉過程</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GLbMrGYdxAAT-3Vee-vXDA.png"
                      alt="過程以長方形圖是呈現"
                ><figcaption>過程以長方形圖是呈現</figcaption></figure></p>
<p>透過上方圖示我們便可看出輾轉的真正特性，透過互換且不斷地進行運算，已達到我們期望的結果，也可以從上圖中透過切割長方形的模式，在長方形中找出能切割的最大面積正方形，以此將整個長方形變成有正方形所組成的型態，這又可以回歸到上述所歸納的兩個解：</p>
<ol>
<li>餘數為 0 -&gt; 完整地切割</li>
<li>餘數為 1 -&gt; 無法完整地切割</li>
</ol>
<p>想必讀到這裡一定更能理解輾轉相除法，接下來我們進行實作吧！</p>
<h3 id="以下我們展示虛擬碼-Pseudocode"><a href="#以下我們展示虛擬碼-Pseudocode" class="headerlink" title="以下我們展示虛擬碼 (Pseudocode)"></a>以下我們展示虛擬碼 (Pseudocode)</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">Algorithm: <span class="built_in">EuclidGCD</span>(m, n)</span><br><span class="line">Input: Two integer m <span class="keyword">and</span> n.</span><br><span class="line">Output: The greatest common factor of m <span class="keyword">and</span> n.</span><br><span class="line">r &lt;- m % n</span><br><span class="line"><span class="keyword">while</span> r != <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    m &lt;- n</span><br><span class="line">    n &lt;- r</span><br><span class="line">    r &lt;- m % n</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">以下我們使用 cpp 實作</span><br><span class="line"><span class="type">int</span> <span class="built_in">EuclidGCD</span>(<span class="type">int</span> m, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> r = m % n;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        m = n;</span><br><span class="line">        n = r;</span><br><span class="line">        r = m % n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那上面我們討論到歐幾里德演算法的範疇實屬理論，那實際用途到底可以實現什麼情形呢？在分析這道問號題之前，我們可以再回想一下此演算法，最核心的就是要找出最大公因數，並且在由大化小的過程中，可以達成更有效率地轉換，畢竟是透過一系列輾轉的過程，所以其實輾轉相除法的應用層面非常廣，可以在密碼學、數學、計算機科學等⋯⋯領域做使用，甚至在音樂方面都能有實際上的應用，若想知道更多，網路上其實還有更多有趣的範例等著你們去挖掘呢！（維基百科下方的參考連結有超多有趣的例子！）</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/56528787" >欧几里得与《几何原本》(上篇） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://jason-chen-1992.weebly.com/home/-euclidean-algorithm" >【演算法】歐幾里得算法 Euclidean Algorithm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>五個 Python 好習慣</title>
    <url>/2024/03/16/coding-tips/python-5-tips/</url>
    <content><![CDATA[<p>在學習基礎程式語言中，我們往往只在乎程式能不能運行，會不會基礎語法，然而很多人沒有累積到專案中實際撰寫的好習慣，因此這篇文章中，我將會討論五個 Python 的好習慣，並且這些事我已經落實在專案中的 Coding Style 希望透過這次的分享能夠幫助看到這邊的你寫出更好的程式碼。</p>
<h3 id="1-if-name-main"><a href="#1-if-name-main" class="headerlink" title="1. if __name__ == &#39;__main__&#39;:"></a>1. <code>if __name__ == &#39;__main__&#39;:</code></h3><p>很多人可能在 review 別人的 Python 專案時，都會發現這個條件式。這個條件式的目的是為了確保這個檔案是被直接執行，而不是被 import 進其他檔案中，我們可以舉個例子來看看加上這個條件式的重要性。</p>
<p>我們今天要設計一個 <code>api</code> 是 <code>get_name()</code>，透過呼叫這個 api 我們可以得到從資料庫中取得名字，我們先來看看以下的程式碼：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># api.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Getting name...&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hugo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_name()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> get_name</span><br><span class="line"></span><br><span class="line">get_name()</span><br></pre></td></tr></table></figure></div>

<p>我們可以先觀察執行結果如以下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Getting name...</span><br><span class="line">Hugo</span><br><span class="line">Getting name...</span><br><span class="line">Hugo</span><br></pre></td></tr></table></figure></div>

<p>總共執行了兩次 <code>get_name()</code>，但是奇怪的是我們明明只有在 <code>main.py</code> 中呼叫了一次 <code>get_name()</code>，為什麼會執行兩次呢？</p>
<p>因為我們在 <code>api.py</code> 中的 <code>get_name()</code> 是直接被執行的，所以當我們在 <code>main.py</code> 中 import <code>api.py</code> 時，<code>get_name()</code> 也會被執行一次。</p>
<p>因此我們只要把 <code>main.py</code> 改成以下的程式碼就可以解決這個問題：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> get_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_name()</span><br></pre></td></tr></table></figure></div>

<p>我們就會得到我們想要的執行結果如以下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Getting name...</span><br><span class="line">Hugo</span><br></pre></td></tr></table></figure></div>

<p>這樣就不會執行兩次 <code>get_name()</code> 了，也就是說在我們的程式碼中加上 <code>if __name__ == &#39;__main__&#39;:</code> 可以讓 Python 知道「只要」執行該檔案呼叫的程式碼，而不是從其他 import 進來的 function。</p>
<h3 id="2-在-Python-中加入-main-function"><a href="#2-在-Python-中加入-main-function" class="headerlink" title="2. 在 Python 中加入 main() function"></a>2. 在 Python 中加入 <code>main()</code> function</h3><p>在很多程式語言中都有 <code>main()</code> function 的存在，像是 Go, C, C++, Java 等等。因為對於 Python 任何皆是物件的特性，沒有 <code>main()</code> function 也是可以執行的，不過加上 <code>main()</code> function 我們可以知道程式主要的進入點是什麼。</p>
<p>我們可以從以下範例程式碼觀察，這是沒有加上 <code>main()</code> function 的程式碼：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bad Habit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_goodbye</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Goodbye&#x27;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line">say_goodbye()</span><br></pre></td></tr></table></figure></div>

<p>另外我們可以看到搭配第一個好習慣的 <code>if __name__ == &#39;__main__&#39;:</code>，再加上宣告 <code>main()</code> function，這樣我們就可以確保程式的進入點是 <code>main()</code> function，另外我們也可以確認的是執行的是該檔案呼叫的 <code>main()</code> function。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Good Habit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_goodbye</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Goodbye&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>這時候大家可能會覺得我平常的寫法也不會出錯，何必多寫幾行呢？</p>
<p>我們今天要假使當你的專案越來越大時，要在幾千行之中找到主程式運行的地方是一件非常困難的事情，因此加上 <code>main()</code> function 可以讓你的程式碼更加的有組織性，並且也可以更快地釐清 scripts 的運行目的。</p>
<h3 id="3-避免過多的-if-巢狀判斷邏輯"><a href="#3-避免過多的-if-巢狀判斷邏輯" class="headerlink" title="3. 避免過多的 if 巢狀判斷邏輯"></a>3. 避免過多的 <code>if</code> 巢狀判斷邏輯</h3><p>假如我們今天上課只想點資工系的大三，我們要先判斷年級，再判斷系所，如果都有符合那就是點名成功，否則就是翹課出去爽了，我們可以看看這個 scenario 的實現：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bad Habit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_attendance</span>(<span class="params">grade: <span class="built_in">int</span>, department: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> grade == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> department == <span class="string">&#x27;CS&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Attendance success&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;You are not in CS department&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;You are not in 3rd grade&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>這樣的寫法看起來沒有什麼問題，但是當我們的判斷條件越來越多時，這樣的寫法會讓我們的程式碼變得非常難以閱讀，我們可以透過以下的寫法來改善：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Good Habit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_year_three</span>(<span class="params">grade: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">return</span> grade == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_cs_major</span>(<span class="params">department: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">return</span> department == <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_attendance</span>(<span class="params">grade: <span class="built_in">int</span>, department: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> is_year_three(grade) <span class="keyword">and</span> is_cs_major(department):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Attendance success&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;You are not in the class&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>如此我們可以把條件給分開成不同的判斷，這樣我們如果要修改條件的話也可以直接從獨立出來的 function 進行修改，而不用去修改原本的程式碼，同時也避免同一個 function 中有過多的 <code>if</code> 巢狀判斷邏輯，造成閱讀上的困難。</p>
<h3 id="4-為變數加上型別提示"><a href="#4-為變數加上型別提示" class="headerlink" title="4. 為變數加上型別提示"></a>4. 為變數加上型別提示</h3><p>Python 是個不用宣告型別的程式語言，這樣的特性讓 Python 的程式碼變得非常的靈活，但是當我們接手他人的專案又或是需要快速理解程式邏輯時，我們很難一眼就看出這個變數是什麼型別，這時候我們可以透過型別提示來讓程式碼更加的易讀。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">number1: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">number2: <span class="built_in">int</span> = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number1)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(number2)  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure></div>

<p>以上的範例中，我們可以看到 <code>number1</code> 和 <code>number2</code> 都有加上型別提示，都是 <code>int</code>，不過我們可以看到 <code>number2</code> 中，我們賦予的內容是 <code>&#39;20&#39;</code>，這個作法在 Python 中我們單純只是 print 出來的話是不會有問題的，但是如果我們要進行數學運算的話就會出現問題，這時候我們就可以透過型別提示來瞭解該變數該賦予的類型，以免在後續使用出問題。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">number1: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">number2: <span class="built_in">int</span> = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number1 + number2)</span><br></pre></td></tr></table></figure></div>

<p>錯誤訊息會如以下，會發現 <code>number1</code> 和 <code>number2</code> 的型別不同，所以無法進行運算，也就是說當初我們在宣告變數時加上型別提示，可以讓我們避免做出型別混用的錯誤。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;hugo/is/great/developer/python_tip_04.py&quot;</span>, line 4, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(number1 + number2)</span><br><span class="line">          ~~~~~~~~^~~~~~~~~</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> and <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5-List-Comprehension"><a href="#5-List-Comprehension" class="headerlink" title="5. List Comprehension"></a>5. List Comprehension</h3><p>我們在撰寫程式時，常常會需要遍歷一個 list，並且對每一個元素進行操作，這時候我們可能會需要撰寫一堆 <code>for</code> 迴圈還有 <code>if</code> 來得到我們要的資訊，這時我們就可以透過 List Comprehension 來讓我們的程式碼更加的簡潔。</p>
<p>當我們今天要在一個 List 找出所有的偶數，我們可以透過以下的寫法來達成：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bad Habit</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">even_numbers = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        even_numbers.append(number)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(even_numbers) <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure></div>

<p>透過 List Comprehension 我們可以把上面的程式碼簡化成以下的寫法：</p>

  <div class="note p-4 mb-4 rounded-small green">
    <p><strong>💡 TIP</strong></p>
<p>這邊提供大家 List Comprehension 的記憶方法，那就是 <code>[目標 for 目標 in 來源 if 條件]</code>，這樣可以幫助大家更快理解以及上手。</p>

  </div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Good Habit</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">even_numbers = [number <span class="keyword">for</span> number <span class="keyword">in</span> numbers <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(even_numbers) <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure></div>

<p>完成啦 🖐🏻！以上就是五個在 Python 中的好習慣，也是我在撰寫專案中一步一步累積到的經驗，有些也不是老師上課會教的內容，但是好習慣往往從日常最好養成，希望大家在未來的開發途中，也可以將這些技巧運用在專案中，讓程式碼更加的易讀並且更加的有組織性，未來也會持續分享更多的 Python 小技巧，請大家持續關注。</p>
]]></content>
      <categories>
        <category>CodingTips</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS: 如何在 AWS EC2 Amazon Linux 2 上安裝 Docker</title>
    <url>/2024/04/11/dev-ops/amazon-linux-2-install-docker/</url>
    <content><![CDATA[<p>在我們需要做 DevOps 時，我們常常會需要用到 Containerization 技術，而 Docker 是目前最為廣泛使用的 Containerization 技術之一。同時我們也可能會用到雲端的算力來幫助我們完成這些工作，因此我們今天將會介紹如何在 Amazon Linux 2 上安裝 Docker。</p>
<h3 id="連線到-EC2"><a href="#連線到-EC2" class="headerlink" title="連線到 EC2"></a>連線到 EC2</h3><p>我們會需要透過 SSH 連線到 EC2，當然我們也可以直接透過 Console 連線到 Shell 來操作，我們將會以 SSH 的方式連線到 EC2 來操作，畢竟可以本地連上去操作會更加順手。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 &lt;ec2-public-ip&gt; 換成你的 EC2 的 Public IP</span></span><br><span class="line">$ ssh -i <span class="string">&quot;your.pem&quot;</span> ec2-user@&lt;ec2-public-ip&gt;.compute-1.amazonaws.com</span><br><span class="line">   ,     <span class="comment">#_</span></span><br><span class="line">   ~\_  <span class="comment">######_        Amazon Linux 2</span></span><br><span class="line">  ~~  \_<span class="comment">#######\</span></span><br><span class="line">  ~~     \<span class="comment">####|       AL2 End of Life is 2025-06-30.</span></span><br><span class="line">  ~~       \<span class="comment">#/ ___</span></span><br><span class="line">   ~~       V~<span class="string">&#x27; &#x27;</span>-&gt;</span><br><span class="line">    ~~~         /    A newer version of Amazon Linux is available!</span><br><span class="line">      ~~._.   _/</span><br><span class="line">         _/ _/       Amazon Linux 2023, GA and supported <span class="keyword">until</span> 2028-03-15.</span><br><span class="line">       _/m/<span class="string">&#x27;           https://aws.amazon.com/linux/amazon-linux-2023/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[ec2-user]@your-ip ~ $</span></span><br></pre></td></tr></table></figure></div>

<h3 id="檢查安裝所需的-yum"><a href="#檢查安裝所需的-yum" class="headerlink" title="檢查安裝所需的 yum"></a>檢查安裝所需的 <a class="link"   href="https://en.wikipedia.org/wiki/Yum_(software)" >yum <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>透過 <a class="link"   href="https://en.wikipedia.org/wiki/Yum_(software)" >yum <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 來檢查我們的版本，並且我們也會用作安裝 Docker 的套件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 檢查 yum 的版本</span></span><br><span class="line">$ sudo yum update</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line">No packages marked <span class="keyword">for</span> update</span><br></pre></td></tr></table></figure></div>


<p>透過 yum 來搜尋 Docker 的套件，並且查看 Docker 的資訊。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜尋 Docker 的套件</span></span><br><span class="line">$ sudo yum search docker</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line">===================================================== N/S matched: docker =====================================================</span><br><span class="line">pcp-pmda-docker.x86_64 : Performance Co-Pilot (PCP) metrics from the Docker daemon</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>yum info docker</code> 來查看 Docker 的資訊。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum info docker</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line">Available Packages</span><br><span class="line">Name        : docker</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>


<h3 id="安裝-Docker-以及啟動-Docker-服務"><a href="#安裝-Docker-以及啟動-Docker-服務" class="headerlink" title="安裝 Docker 以及啟動 Docker 服務"></a>安裝 Docker 以及啟動 Docker 服務</h3><p>在查看完 Docker 的資訊後，我們可以透過 yum 來安裝 Docker。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker</span><br><span class="line">...</span><br><span class="line">Installed:</span><br><span class="line">  docker.x86_64 0:20.10.25-1.amzn2.0.4</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  containerd.x86_64 0:1.7.11-1.amzn2.0.1        libcgroup.x86_64 0:0.41-21.amzn2        pigz.x86_64 0:2.3.4-1.amzn2.0.1</span><br><span class="line">  runc.x86_64 0:1.1.11-1.amzn2</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure></div>

<p>檢查一下我們的 Docker 是否有安裝成功吧！</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           20.10.25</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.25</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></div>


<p>啟動我們的 Docker 服務。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">Redirecting to /bin/systemctl start docker.service</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure></div>

<p>我們可以透過 systemctl 來檢查 Docker 服務的狀態，當我們看到 <code>Active: active (running)</code> 時，就代表我們的 Docker 服務已經成功啟動。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2024-04-10 02:29:53 UTC; 1min 13s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 3529 (dockerd)</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─3529 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --default-ulimit nofile=32768:65536...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>我們可以把 ec2-user 加入到 docker 群組中，這樣我們就不需要每次都要用 sudo 來執行 Docker 的指令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -a -G docker ec2-user</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">id</span> ec2-user</span><br><span class="line">uid=1000(ec2-user) gid=1000(ec2-user) <span class="built_in">groups</span>=1000(ec2-user),4(adm),10(wheel),190(systemd-journal),992(docker)</span><br><span class="line"></span><br><span class="line">$ newgrp docker</span><br></pre></td></tr></table></figure></div>

<h3 id="安裝-docker-compose"><a href="#安裝-docker-compose" class="headerlink" title="安裝 docker-compose"></a>安裝 <code>docker-compose</code></h3><p>我們需要安裝 <code>docker-compose</code> 來幫助我們管理 Docker 的 Container，我們可以透過 pip3 來安裝 <code>docker-compose</code>。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Get pip3</span></span><br><span class="line">$ sudo yum install python3-pip</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line">amzn2-core                                                                                              | 3.6 kB  00:00:00</span><br><span class="line">Package python3-pip-20.2.2-1.amzn2.0.5.noarch already installed and latest version</span><br><span class="line">Nothing to <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Then run any one of the following</span></span><br><span class="line">$ pip3 install --user docker-compose</span><br><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading docker_compose-1.29.2-py2.py3-none-any.whl (114 kB)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Successfully installed ... docker-compose-1.29.2 ...</span><br></pre></td></tr></table></figure></div>


  <div class="note p-4 mb-4 rounded-small warning">
    <p><strong>⚠️ 注意</strong><br>如果在安裝 <code>docker-compose</code> 時出現錯誤，可能是因為 <code>urllib3</code> 的版本支援問題，我們可以透過 <code>pip3 install urllib3==1.26.15</code> 來安裝特定版本的 <code>urllib3</code>。</p>
<p>可以參考 <a class="link"   href="https://github.com/explosion/spaCy/discussions/12750" >Persisting spaCy import error: NotOpenSSLWarning: urllib3 v2.0 only supports OpenSSL 1.1.1+ #12750 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 來排除</p>

  </div>

<p>我們也可以使用 <code>wget</code> 來下載 <code>docker-compose</code> 並且安裝。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/docker/compose/releases/latest/download/docker-compose-$(<span class="built_in">uname</span> -s)-$(<span class="built_in">uname</span> -m) </span><br><span class="line">$ sudo <span class="built_in">mv</span> docker-compose-$(<span class="built_in">uname</span> -s)-$(<span class="built_in">uname</span> -m) /usr/local/bin/docker-compose</span><br><span class="line">$ sudo <span class="built_in">chmod</span> -v +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<p>我們可以透過 <code>docker-compose --version</code> 來檢查 <code>docker-compose</code> 是否有安裝成功。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.29.2, build unknown</span><br><span class="line">docker-py version: &lt;module <span class="string">&#x27;docker.version&#x27;</span> from <span class="string">&#x27;/home/ec2-user/.local/lib/python3.7/site-packages/docker/version.py&#x27;</span>&gt;</span><br><span class="line">CPython version: 3.7.16</span><br><span class="line">OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure></div>


<p>這時我們就可以開始使用 Docker 來做 Containerization 的工作了。</p>
<p>最後附上一些在使用 Docker 時可能會用到的指令。祝福大家都能順利使用 Docker 來完成自己的工作。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start the service</span></span><br><span class="line">$ sudo systemctl start docker.service</span><br><span class="line"><span class="comment"># stop the service</span></span><br><span class="line">$ sudo systemctl stop docker.service</span><br><span class="line"><span class="comment"># restart the service</span></span><br><span class="line">$ sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># get the service status</span></span><br><span class="line">$ sudo systemctl status docker.service</span><br></pre></td></tr></table></figure></div>


<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://www.cyberciti.biz/faq/how-to-install-docker-on-amazon-linux-2/" >How to install Docker on Amazon Linux 2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://swapnasagarpradhan.medium.com/how-to-install-docker-on-amazon-linux-2-8e5161ac5464" >How to install Docker on Amazon Linux 2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>AWS</tag>
        <tag>EC2</tag>
        <tag>Amazon Linux 2</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS: Comparing Inbound Rules: AWS Security Group vs. Network Access Control List (NACL)</title>
    <url>/2024/03/22/dev-ops/aws-security-group-nacl/</url>
    <content><![CDATA[<p>During a meeting, we explored a scenario: “If we disable the inbound rule of the Network Access Control List (NACL), the connection will be interrupted. However, if we turn off inbound traffic in the Security Group, would we still be able to connect?” Surprisingly, the answer is YES. The rationale behind this phenomenon will be elaborated on in this article.</p>
<p>We can discuss the differences between Security Group and Network Access Control List (NACL) from various perspectives. The primary difference between the two is:</p>
<blockquote>
<p>The Security Group acts as the firewall for EC2 Instances. </p>
<p>The Network ACL serves as the firewall for the VPC Subnets.</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/aws-security-group-nacl/arch.png"
                      alt="Awesome Cloud — Security Groups and Network ACLs"
                ><figcaption>Awesome Cloud — Security Groups and Network ACLs</figcaption></figure></p>
<p>Next, we can discuss the differences between the two from the following perspectives:</p>
<h3 id="Defense-Layers"><a href="#Defense-Layers" class="headerlink" title="Defense Layers"></a>Defense Layers</h3><p>Security Groups are associated with specific instances, which could be an EC2 instance, an ECS cluster, or an RDS database instance. On the other hand, Network Access Control Lists (NACLs) operate at the subnet level. This means that any instance within a subnet that has an associated NACL will automatically adhere to the NACL’s rules.</p>
<h3 id="Application-Scope"><a href="#Application-Scope" class="headerlink" title="Application Scope"></a>Application Scope</h3><p>While Security Groups are tailored for individual instances, NACLs are designed to provide rules for the entire Subnet within a Virtual Private Cloud (VPC).</p>
<h3 id="Statefulness"><a href="#Statefulness" class="headerlink" title="Statefulness"></a>Statefulness</h3><p>Security Group is stateful which means if you allow the inbound traffic, the response traffic is allowed automatically. No matter what the outbound rules are. However, NACL is stateless and do not track the state of a connection.</p>
<h3 id="Default-Rules"><a href="#Default-Rules" class="headerlink" title="Default Rules"></a>Default Rules</h3><p>By default, Security Groups block all inbound traffic while allowing all outbound traffic. Conversely, Network Access Control Lists (NACLs) have a default rule at the subnet boundary that permits both inbound and outbound traffic. The application of these rules in NACLs is determined by Rule Numbers, with higher numbers indicating higher priority.</p>
<h3 id="Rule-Application-Order"><a href="#Rule-Application-Order" class="headerlink" title="Rule Application Order"></a>Rule Application Order</h3><p>NACLs apply a numbered list of rules sequentially. However, Security Groups do not follow a specific order in rule application.</p>
<h3 id="Traffic-Blocking-Capabilities"><a href="#Traffic-Blocking-Capabilities" class="headerlink" title="Traffic Blocking Capabilities"></a>Traffic Blocking Capabilities</h3><p>NACLs have the ability to block traffic at the subnet level. In contrast, Security Groups can only block traffic at the instance level.</p>
<h3 id="Impact-on-Network-Performance"><a href="#Impact-on-Network-Performance" class="headerlink" title="Impact on Network Performance"></a>Impact on Network Performance</h3><p>Network Access Control Lists (NACLs) can potentially exert a significant impact on network performance. This is because they operate at the subnet level, applying their rules to all instances within the subnet. On the other hand, Security Groups operate at the instance level, applying their rules only to individual instances, thus having a more localized impact.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>To sum up, let’s circle back to our main discussion. “If we disable the inbound rule of the Network Access Control List (NACL), the connection will be interrupted. Why is that?” Unlike Security Groups, NACLs are stateless. This means they do not keep track of the connection’s state, and each packet of data is treated independently. Therefore, if we disable the inbound rule of a NACL, it will not allow any incoming traffic, effectively breaking the connection.</p>
<p>On the other hand, if we turn off inbound traffic in the Security Group, we can still connect. The absence of inbound rules does not disrupt the connection because the Security Group functions as a stateful firewall. Even with specific inbound traffic blocked, a connection can still be established as it originates from within the EC2 instance, and the returning traffic is allowed.</p>
<p>This concept aligns with the TCP Three-way Handshake (SYN, SYN-ACK, ACK). The connection is initiated by the client, and the server responds to the client’s request. Once we create the tunnel between the server and client, the connection is established.</p>
<p>Therefore, after disabling the Inbound Rule of the Security Group, we have a grace period to inform customers or other parties, preventing an immediate disruption of the service connection.</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a class="link"   href="https://www.mygreatlearning.com/aws/tutorials/nacl-vs-security-group" >NACL vs Security Group <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.knowledgehut.com/tutorials/aws/nacl-vs-security-groups" >Security groups vs Network ACLs - What is the Difference? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://k21academy.com/amazon-web-services/aws-solutions-architect/aws-security-groups-vs-nacl/" >AWS Network Security: NACL vs Security Groups <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://digitalcloud.training/aws-security-group-vs-nacl-key-differences/" >AWS Security Group vs NACL – Key Differences <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://community.meraki.com/t5/Security-SD-WAN/Meraki-vMX-amp-AWS-security-group/m-p/222409#:~:text=Having%20no%20inbound%20rules%20does%20not%20cause%20the%20tunnel%20to,instance%20and%20returning%20traffic%20allowed" >Meraki vMX &amp; AWS security group <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://medium.com/awesome-cloud/aws-difference-between-security-groups-and-network-acls-adc632ea29ae" >AWS — Difference between Security Groups and Network Access Control List (NACL) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>EC2</tag>
        <tag>Cli</tag>
        <tag>Security Group</tag>
        <tag>NACL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Commit Message 到底怎麼寫才優美？</title>
    <url>/2024/03/26/dev-ops/git-good-commit-look-like/</url>
    <content><![CDATA[<p>在團隊用 Git 協作中，Commit Message 是很重要的一環，好的 Commit 可以讓我們的專案更容易維護，讓我們更容易了解專案的開發過程，我們可以想像是程式碼的註解，不過是針對專案改動的註解。所以我們想要用這個篇幅來介紹一些寫 Commit 的技巧，讓我們的 Commit 更優美。</p>
<h3 id="那到底甚麼是好的-Commit-Message？"><a href="#那到底甚麼是好的-Commit-Message？" class="headerlink" title="那到底甚麼是好的 Commit Message？"></a>那到底甚麼是好的 Commit Message？</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fix</span><br></pre></td></tr></table></figure></div>

<p>V.S. </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fix: login error </span><br><span class="line"></span><br><span class="line">The past login router was being reused multiple times.</span><br><span class="line"></span><br><span class="line">Fixed it to use the correct route and extracted the duplicated parts.</span><br><span class="line"></span><br><span class="line">Issue: #1234</span><br></pre></td></tr></table></figure></div>

<p>從上方的 Commit 案例中，如果都是一個月前的改動，甚至是一年前的改動，當我今天需要去了解這個改動的時候，我們可以發現第一個 Commit 是很難讓我們了解這個改動的目的，甚至是看不懂要做甚麼，而第二個 Commit 會讓我們更容易了解這個改動的目的，這就是好的 Commit Message 的重要性。</p>
<p>常常軟體工程師中有個迷因 <a class="link"   href="https://www.quora.com/Is-it-normal-if-I-cant-remember-how-my-code-works-after-just-6-months" >Is it normal if I can’t remember how my code works after just 6 months? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 就是，大家回去看自己寫的程式都看不懂，甚至會覺得噁心，因此好的 Commit 可以讓我們更容易了解過去團隊做了甚麼事情，這樣我們就可以更容易地維護專案。</p>
<p><figure class="image-caption"><img src="/images/post/dev-ops/git-good-commit-look-like/meme.JPG" alt="https://www.quora.com/Is-it-normal-if-I-cant-remember-how-my-code-works-after-just-6-months"><figcaption>https://www.quora.com/Is-it-normal-if-I-cant-remember-how-my-code-works-after-just-6-months</figcaption></figure></p>
<h2 id="Commit-Message-的格式"><a href="#Commit-Message-的格式" class="headerlink" title="Commit Message 的格式"></a>Commit Message 的格式</h2><p>好的 Commit 應該要能夠一眼看出種類、工作內容的大鋼，更重要的是一致性，這樣我們可以更容易地追蹤開發過程。因此我們可以從以下幾個內容：我們做了甚麼努力（What）、又為什麼要做這件事情（Why）、還有是用什麼方法做到的（How）。</p>
<p>我們可以參考以下的格式：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Header: &lt;TYPE&gt;(&lt;SCOPE&gt;): &lt;SUBJECT&gt;</span><br><span class="line">    - TYPE: Represents the category of the commit.</span><br><span class="line">    - SCOPE: Represents the scope of the commit.</span><br><span class="line">    - (Required) SUBJECT: Represents a brief description of the commit, (limited to 50 characters and should not end with a period)</span><br><span class="line"></span><br><span class="line">Body: 72-character wrapped. This should answer:</span><br><span class="line">    - Provide a detailed description of the commit. (Can be <span class="built_in">split</span> into multiple lines, with each line limited to 72 characters.)</span><br><span class="line">    - Explain the changes made <span class="keyword">in</span> the code, and Why to <span class="keyword">do</span>?</span><br><span class="line"></span><br><span class="line">Footer:</span><br><span class="line">    - (<span class="keyword">if</span> applicable) Include the task number.</span><br><span class="line">    - (optional) BREAKING CHANGE: Record incompatible changes. It should start with <span class="string">&quot;BREAKING CHANGE:&quot;</span> followed by a description of the change, the reason <span class="keyword">for</span> the change, and migration instructions.</span><br></pre></td></tr></table></figure></div>

<h3 id="Commit-Message-Header"><a href="#Commit-Message-Header" class="headerlink" title="Commit Message Header: &lt;TYPE&gt;(&lt;SCOPE&gt;): &lt;SUBJECT&gt;"></a>Commit Message Header: <code>&lt;TYPE&gt;(&lt;SCOPE&gt;): &lt;SUBJECT&gt;</code></h3><ul>
<li>TYPE: 代表 commit 的類別，如：feat, fix, docs, style, refactor, test, chore</li>
<li>（可選）SCOPE：commit 影響的範圍，如：資料庫、控制層、模板層等，視專案不同改變</li>
<li>（必要）SUBJECT：commit 的簡短描述，不超過 50 個字元，結尾不加句號，盡量讓 Commit 單一化，一次只更動一個主題</li>
</ul>
<h4 id="Type-的種類"><a href="#Type-的種類" class="headerlink" title="Type 的種類"></a>Type 的種類</h4><p>Type 有以下幾種的類別，每個都會是一個動作，代表提交 Commit 的類別，以下是一些我們使用慣例：</p>
<ul>
<li>feat: 對專案做了哪些新增、修改 (Feature)。</li>
<li>fix: 修復了那些功能 (Bug Fix)。</li>
<li>docs: 對專案撰寫文件 (Documentation)。</li>
<li>style: 撰寫格式改動 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, et.)。</li>
<li>refactor: 重構 (既不是新增功能，也不是修補 bug 的程式碼變動)。</li>
<li>perf: 改善效能 (A code change that improves performance)。</li>
<li>test: 增加測試 (when adding missing tests)。</li>
<li>chore: 建構程序或輔助工具的變動 (maintain)。</li>
<li>revert: 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。</li>
</ul>
<h3 id="Commit-Message-Body"><a href="#Commit-Message-Body" class="headerlink" title="Commit Message Body"></a>Commit Message Body</h3><p>傳達「我們做了甚麼努力（What）、又為什麼要做這件事情（Why）、還有是用什麼方法做到的（How）」，描述詳細改動的內容，可以分成多行，每行不超過 72 個字元，也可以有前後改動差異的描述。</p>
<h3 id="Commit-Message-Footer"><a href="#Commit-Message-Footer" class="headerlink" title="Commit Message Footer"></a>Commit Message Footer</h3><p>用來填寫相關聯 issue 的編號，像是 <code>Issue: #1234</code>。另外還有 BREAKING CHANGE（未必需要），記錄不相容的變動，應該以「BREAKING CHANGE:」開頭，後面是變動的描述、原因和遷移方法。</p>
<h3 id="一些實際的例子"><a href="#一些實際的例子" class="headerlink" title="一些實際的例子"></a>一些實際的例子</h3><p>我們在現有的功能上加上了 email 驗證，我們可以使用 <code>feat</code> 來撰寫：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">feat: email validation</span><br><span class="line"></span><br><span class="line">We have implemented the following enhancements:</span><br><span class="line"></span><br><span class="line">1. Introduced email validation to the login form.</span><br><span class="line">2. The new feature verifies if the user&#x27;s input is in a valid email format.</span><br><span class="line">3. It checks if the entered email corresponds to an actual email account.</span><br><span class="line">4. This update aims to prevent users from entering incorrect email addresses.</span><br><span class="line">5. It improves overall user experience and data integrity.</span><br><span class="line"></span><br><span class="line">Issue: #1234</span><br></pre></td></tr></table></figure></div>

<p>今天我們需要基於過去版本做開發，我們可以使用 <code>revert</code> 來回覆先前的 Commit：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">revert: feat: email validation</span><br><span class="line"></span><br><span class="line">To address the issue, we have decided to revert the email validation feature to the previous version.</span><br><span class="line"></span><br><span class="line">Issue: #2345</span><br></pre></td></tr></table></figure></div>

<p>我們在準備將產品上線的時候，我們駔了幾個 unit test，我們可以使用 <code>test</code> 來撰寫：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">test: email validation</span><br><span class="line"></span><br><span class="line">There are several unit tests for the email validation feature:</span><br><span class="line">1. Test the email validation function with invalid email addresses.</span><br><span class="line">2. Test the email validation function with valid email addresses.</span><br><span class="line"></span><br><span class="line">Issue: #3456</span><br></pre></td></tr></table></figure></div>

<p>今天我們已經將新功能做好了，我們希望加上文件的說明，我們可以使用 <code>docs</code> 來撰寫：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docs: email validation</span><br><span class="line"></span><br><span class="line">We have added documentation for the email validation feature:</span><br><span class="line">1. Add the Tech Stack documentation.</span><br><span class="line">2. Add the User Guide documentation.</span><br><span class="line">3. Add the API documentation.</span><br><span class="line"></span><br><span class="line">Issue: #4567</span><br></pre></td></tr></table></figure></div>

<p>後來因為我們的用戶數量變多了，我們希望優化現有的架構提升驗證速度，我們可以使用 <code>perf</code> 來撰寫：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">perf: email validation</span><br><span class="line"></span><br><span class="line">We have optimized the email validation feature:</span><br><span class="line">1. Improved the email validation algorithm.</span><br><span class="line">2. Reduced the time required to validate email addresses.</span><br><span class="line">3. Enhanced the user experience by providing faster feedback.</span><br><span class="line"></span><br><span class="line">Issue: #5678</span><br></pre></td></tr></table></figure></div>


<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Commit Message 的撰寫會需要大量的練習，也需要時間讓團隊成員去實踐，如此可以讓我們追朔過去的努力，也可以幫助團隊成員更快速地餐與開發過程，這樣我們就可以更容易地維護專案。最後祝大家一切開發都順利，也希望大家的 Commit Message 越來越優美。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html" >Git Commit Message 這樣寫會更好，替專案引入規範與範例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://heidiliu2020.github.io/git-commit-message/" >[學習筆記] 如何撰好的 Git Commit Message <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Commit</tag>
      </tags>
  </entry>
  <entry>
    <title>踏入 Git 的世界：使用 ssh 與 GitHub 連線 👨🏻‍💻</title>
    <url>/2023/09/08/dev-ops/git-ssh/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git 是每位軟體工程師日常工作不可或缺的工具之一，畢竟軟體開發常常需要跟他人合作，甚至是維護、更新等⋯⋯可能都需要參照過去的成果，甚至需要快速與團隊同步，因此 Git 對大家而言都不陌生吧！<br>但是，有時候我們會遇到一些問題，例如：每次 push 都需要輸入帳號密碼，或是每次 push 都需要輸入密碼，這些都是可以透過 ssh 來解決的，接下來就讓我們一起來看看如何使用 ssh 與 GitHub 連線吧！</p>
<h3 id="1-產生-ssh-key"><a href="#1-產生-ssh-key" class="headerlink" title="1. 產生 ssh key"></a>1. 產生 ssh key</h3><p>首先，我們需要先產生 ssh key，這個 key 會被存在 <code>~/.ssh</code> 資料夾中，如果沒有的話，可以使用以下指令建立（記得要把 email 改成你自己的 email，否則永遠不會成功哦！）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>上述操作 <code>ed25519</code> 其實是較新的演算法，如果電腦不支援的話也可以使用以下另一種演算法生成（同樣也要記得把 email 改成你自己的 email）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>以下將使用 <code>id_rsa</code> 做示範，接下來將出現以下畫面，直接按 <strong>Enter</strong> 就會幫你把產生的 key 放在預設的地方 <code>~/.ssh/id_rsa</code> ，也就是下方括號內的位址。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></div>

<p>接下來會出現以下畫面，若不想以後 push 都要輸入 <code>passphrase</code> 的話，就連續點擊兩次 <strong>Enter</strong> 這樣 <code>passphrase</code> 就會是空的，以後 push 就不用輸入了！</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Click Enter Twice</span></span><br><span class="line">$ Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">$ Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></div>

<p>這樣做 ssh key 就已經生成好了！</p>
<p>總共會生成兩個 key，private and public key，接下來會帶大家如何找到這兩個 key。</p>
<h3 id="2-取得-public-ssh-key"><a href="#2-取得-public-ssh-key" class="headerlink" title="2. 取得 public ssh key"></a>2. 取得 public ssh key</h3><p>接著我們要進到剛剛放置 key 的位置，因此我們照著以下流程，把 public 的 key 拿出（副檔名為 <code>.pub</code>），要特別注意 GitHub 只需要 public 的 key，private 要自己留好！千萬不要給任何人！</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">id_rsa          id_rsa.pub</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure></div>

<p>接下來就把 <code>cat id_rsa.pub</code> 的內容複製下來，我們就可以回 GitHub 做最後一步設定了！</p>
<h3 id="3-把-public-key-設定到-GitHub"><a href="#3-把-public-key-設定到-GitHub" class="headerlink" title="3. 把 public key 設定到 GitHub"></a>3. 把 public key 設定到 GitHub</h3><p>接下來我們要把 public key 設定到 GitHub，這樣 GitHub 才能辨識你的電腦，讓你可以透過 ssh 連線到 GitHub，這樣就可以真的達到不用每次 push 都要輸入帳號密碼了！接下來將用截圖畫面的方式展示步驟！</p>
<h4 id="3-A-前往-GitHub-設定"><a href="#3-A-前往-GitHub-設定" class="headerlink" title="3-A. 前往 GitHub 設定"></a>3-A. 前往 GitHub 設定</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/git-ssh/01.png"
                     
                ></p>
<h4 id="3-B-點擊-“SSH-and-GPG-keys”"><a href="#3-B-點擊-“SSH-and-GPG-keys”" class="headerlink" title="3-B. 點擊 “SSH and GPG keys”"></a>3-B. 點擊 “SSH and GPG keys”</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/git-ssh/02.png"
                     
                ></p>
<h4 id="3-C-進入-“SSH-and-GPG-keys”-頁面後點擊-“New-SSH-key”"><a href="#3-C-進入-“SSH-and-GPG-keys”-頁面後點擊-“New-SSH-key”" class="headerlink" title="3-C. 進入 “SSH and GPG keys” 頁面後點擊 “New SSH key”"></a>3-C. 進入 “SSH and GPG keys” 頁面後點擊 “New SSH key”</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/git-ssh/03.png"
                     
                ></p>
<h4 id="3-D-貼上-public-key-最後送出"><a href="#3-D-貼上-public-key-最後送出" class="headerlink" title="3-D. 貼上 public key 最後送出"></a>3-D. 貼上 public key 最後送出</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/git-ssh/04.png"
                     
                ></p>
<p>照著上述步驟就一切沒問題了，以後把專案 clone 到本地就選擇 ssh 的方式就搞定啦！ </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/git-ssh/05.png"
                     
                ></p>
<p>如果原先專案是走 <code>http</code> 的方式 <code>clone</code> 下來的話只要做以下更改就可以換成 <code>ssh</code> 啦！</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin &lt;your_project_ssh_url&gt;</span><br></pre></td></tr></table></figure></div>

<p>如此以後專案 push 到 GitHub 就都會走 ssh 了也不需要每次都輸入帳號密碼了！最後祝大家以後都開發順利！可以開始進行更多遠端的 Git 操作了！</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>SSH Key</tag>
      </tags>
  </entry>
  <entry>
    <title>透過 Docker 打包 FastAPI 與 Redis 的服務串流</title>
    <url>/2024/04/15/dev-ops/python-reddis-docker/</url>
    <content><![CDATA[<p>當今天我們要自架一個服務的時候，我們會需要後端的 Server 以及需要 Database 來保存服務的內容，因此我們今天將透過 Docker 包裝 Redis 以及 Python FastAPI 來實作一個簡單的服務。</p>
<h3 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h3><p>首先我們要開始撰寫 Python FastAPI 的程式碼，不過在開始之前我們要先建立我們的虛擬環境並且安裝我們所需的 dependencies。（我們的 Python 環境是 Python 3.11，以及所需的套件是 fastapi, uvicorn, redis, python-dotenv）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> my-fastapi-redis    <span class="comment"># 建立專案資料夾</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> my-fastapi-redis       <span class="comment"># 進入專案資料夾</span></span><br><span class="line"></span><br><span class="line">$ python3 -m venv venv      <span class="comment"># 建立虛擬環境</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate  <span class="comment"># 啟動虛擬環境</span></span><br><span class="line"></span><br><span class="line">$ pip install fastapi uvicorn redis python-dotenv requests   <span class="comment"># 安裝所需套件</span></span><br></pre></td></tr></table></figure></div>

<p>我們的專案結構會如以下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PROJECT_ROOT</span><br><span class="line">├── app/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── main.py</span><br><span class="line">├── scripts/</span><br><span class="line">│   ├── run.sh</span><br><span class="line">│   └── test.sh</span><br><span class="line">├── test/</span><br><span class="line">│   └── test_api.py</span><br><span class="line">├── .env</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure></div>

<h3 id="實作-FastAPI-與-Redis"><a href="#實作-FastAPI-與-Redis" class="headerlink" title="實作 FastAPI 與 Redis"></a>實作 FastAPI 與 Redis</h3><p>再來我們可以透過 <a class="link"   href="https://www.docker.com/" >Docker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 來啟動 <a class="link"   href="https://redis.io/" >Redis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 服務，這裡我們使用 <a class="link"   href="https://hub.docker.com/_/redis" >Redis 官方提供的 Docker Image <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 來啟動 Redis 服務，我們會將預設的 6379 port 對應到本地端的 6379 port。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --name my-redis -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure></div>

<p>我們可以透過以下指令來確認 Redis 服務是否正常運作，我們先進入 Redis 的 Container 內部，再透過 <code>redis-cli</code> 來操作 Redis。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it my-redis sh</span><br></pre></td></tr></table></figure></div>

<p>查看 Redis 的 key，並且試著新增一個 key-value pair，以及刪除 key。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; SET key1 value1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DEL key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></div>

<p>接著我們可以開始撰寫我們的 FastAPI 程式碼，我們會透過 FastAPI 來實作一個簡單的 API，這個 API 會透過 Redis 來儲存資料，我們的目的是能夠新增 Item、刪除 Item、以及列出所有的 Item。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增 item 至 Redis</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># Add item to the Redis list</span></span><br><span class="line">    redis_cli.rpush(<span class="string">&quot;items&quot;</span>, item.name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item added successfully&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得 Redis 內的所有 items</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_200_OK</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_items</span>():</span><br><span class="line">    <span class="comment"># Retrieve items from the Redis list</span></span><br><span class="line">    items = redis_cli.lrange(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;items&quot;</span>: items&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除 Redis 內的特定 item</span></span><br><span class="line"><span class="meta">@app.delete(<span class="params"><span class="string">&quot;/items/&#123;item_name&#125;&quot;</span>, status_code=status.HTTP_200_OK</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_item</span>(<span class="params">item_name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># Delete a specific item from the Redis list</span></span><br><span class="line">    <span class="keyword">if</span> item_name <span class="keyword">not</span> <span class="keyword">in</span> redis_cli.lrange(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;Item not found&quot;</span>)</span><br><span class="line">    redis_cli.lrem(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, item_name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Item &#x27;<span class="subst">&#123;item_name&#125;</span>&#x27; deleted successfully&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的程式碼如下，我們會需要 <code>.env</code> 檔案來設定 Redis 的 Host 以及 Port，預設是 <code>REDIS_HOST=localhost</code> 以及 <code>REDIS_PORT=6379</code>。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/main.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> find_dotenv, load_dotenv</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, status</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Redis</span></span><br><span class="line">_ = load_dotenv(find_dotenv())</span><br><span class="line">REDIS_HOST = os.environ.get(<span class="string">&#x27;REDIS_HOST&#x27;</span>)</span><br><span class="line">REDIS_PORT = os.environ.get(<span class="string">&#x27;REDIS_PORT&#x27;</span>)</span><br><span class="line">redis_cli = redis.Redis(</span><br><span class="line">    host=REDIS_HOST, port=REDIS_PORT, </span><br><span class="line">    decode_responses=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span>, status_code=status.HTTP_200_OK</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增 item 至 Redis</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># Add item to the Redis list</span></span><br><span class="line">    redis_cli.rpush(<span class="string">&quot;items&quot;</span>, item.name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item added successfully&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得 Redis 內的所有 items</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_200_OK</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_items</span>():</span><br><span class="line">    <span class="comment"># Retrieve items from the Redis list</span></span><br><span class="line">    items = redis_cli.lrange(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;items&quot;</span>: items&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除 Redis 內的特定 item</span></span><br><span class="line"><span class="meta">@app.delete(<span class="params"><span class="string">&quot;/items/&#123;item_name&#125;&quot;</span>, status_code=status.HTTP_200_OK</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_item</span>(<span class="params">item_name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># Delete a specific item from the Redis list</span></span><br><span class="line">    <span class="keyword">if</span> item_name <span class="keyword">not</span> <span class="keyword">in</span> redis_cli.lrange(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;Item not found&quot;</span>)</span><br><span class="line">    redis_cli.lrem(<span class="string">&quot;items&quot;</span>, <span class="number">0</span>, item_name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Item &#x27;<span class="subst">&#123;item_name&#125;</span>&#x27; deleted successfully&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="測試-API"><a href="#測試-API" class="headerlink" title="測試 API"></a>測試 API</h3><p>接著我們要撰寫一些 unittest 去測試我們的 API，我們會透過 requests 來發送 HTTP request 並且驗證回傳的 response 是否符合預期。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test/test_api.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestItemEndpoint</span>(unittest.TestCase):</span><br><span class="line">    base_url = <span class="string">&quot;http://localhost:8080/items/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_create_items</span>(<span class="params">self</span>):</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;item1&quot;</span>&#125;</span><br><span class="line">        response = requests.post(self.base_url, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;, data=json.dumps(data))</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;item2&quot;</span>&#125;</span><br><span class="line">        response = requests.post(self.base_url, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;, data=json.dumps(data))</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_items</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(self.base_url)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_item</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.delete(self.base_url + <span class="string">&quot;item1&quot;</span>)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_items_after_deletion</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(self.base_url)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line">        data = response.json()</span><br><span class="line">        self.assertEqual(<span class="built_in">len</span>(data), <span class="number">1</span>)  <span class="comment"># Assuming only one item left after deletion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></div>

<p>當然我們也可以直接透過 <code>curl</code> 直接獲取 API 的 response。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST <span class="string">&quot;http://localhost:8080/items/&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;name&quot;: &quot;item1&quot;&#125;&#x27;</span></span><br><span class="line">$ curl -X POST <span class="string">&quot;http://localhost:8080/items/&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;name&quot;: &quot;item2&quot;&#125;&#x27;</span></span><br><span class="line">$ curl -X GET <span class="string">&quot;http://localhost:8080/items/&quot;</span></span><br><span class="line">$ curl -X DELETE <span class="string">&quot;http://localhost:8080/items/item1&quot;</span></span><br><span class="line">$ curl -X GET <span class="string">&quot;http://localhost:8080/items/&quot;</span></span><br><span class="line">$ curl -X GET <span class="string">&quot;http://localhost:8080/items/&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>不過既然有 unittest 那我們就用 unittest 來測試我們的 API 吧。最後我們要加上 <code>run.sh</code> 以及 <code>test.sh</code> 來方便我們執行程式以及測試。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts/run.sh</span></span><br><span class="line">uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts/test.sh</span></span><br><span class="line">python <span class="built_in">test</span>/test_*.py</span><br></pre></td></tr></table></figure></div>

<p>我們依序透過 <code>scripts/run.sh</code> 以及 <code>scripts/test.sh</code> 來啟動我們的服務以及測試我們的 API。完成會如下的畫面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/dev-ops/python-reddis-docker/python-reddis-docker-demo.png"
                     
                ></p>
<h3 id="打包服務"><a href="#打包服務" class="headerlink" title="打包服務"></a>打包服務</h3><p>最後就是我們要把我們的所有服務打包啦！</p>
<p>我們先將我們的 Dockerfile 寫好，這裡我們使用 Python 3.11 的 slim-buster 作為基底，並且安裝所需的套件，最後我們會將我們的程式碼複製到 Docker Container 內部，並且啟動 FastAPI 服務。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">python:3.11-slim-buster</span></span><br><span class="line"></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">uvicorn</span> <span class="string">redis</span> <span class="string">python-dotenv</span> <span class="string">requests</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">.</span> <span class="string">/app</span></span><br><span class="line"></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;uvicorn&quot;</span>, <span class="string">&quot;app.main:app&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8080&quot;</span>]</span><br></pre></td></tr></table></figure></div>

<p>再來我們會使用到 <code>docker-compose</code> 來管理我們的服務，這裡我們會使用到 Redis 以及 FastAPI 兩個服務，我們會將 Redis 的 6379 port 對應到本地端的 6379 port，以及 FastAPI 的 8080 port 對應到本地端的 8080 port。並且會有個虛擬的網路 <code>hugo-network</code> 來連接兩個服務。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hugo-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hugo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hugo-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure></div>

<p>最後我們只要透過 <code>docker-compose up -d</code> 就可以達到我們開發所需的效果！</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p><strong>⚠️ 注意</strong></p>
<p>因為我們的服務是把 server 跟 db 分開成不同的 container 因此我們需要注意我們的 <code>.env</code> 檔案，我們需要將 <code>REDIS_HOST</code> 設定為 <code>redis</code>，這樣我們的 FastAPI 才能連接到 Redis。</p>

  </div>

<p>今天的內容操作就到這邊完全結束，大家可以參考 <a class="link"   href="https://github.com/1chooo/python-redis-docker/tree/blog" >Source Code - python-redis-docker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 也祝大家都能成功地打包自己的服務！</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://developer.redis.com/develop/python/fastapi/" >Using Redis with FastAPI <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/seymaozler/card-application" >seymaozler&#x2F;card-application <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://medium.com/@seymaaozlerr/building-an-authentication-system-with-fastapi-redis-and-mysql-cc8b005b9c30" >Building an Authentication System with FastAPI, Redis and MySQL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://python-dependency-injector.ets-labs.org/examples/fastapi-redis.html" >FastAPI + Redis example <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://medium.com/@vmbdeveloper/python-using-redis-with-docker-0400a5b2a735" >Python: Using Redis with Docker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.docker.com/blog/how-to-use-the-redis-docker-official-image/" >How to Use the Redis Docker Official Image <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://medium.com/%E7%A8%8B%E5%BC%8F%E4%B9%BE%E8%B2%A8/python-redis-v-s-mysql-%E6%9F%A5%E8%A9%A2%E5%AF%A6%E4%BD%9C-9f0cc0d9b32b" >[Python] Redis v.s Mysql 查詢實作 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://medium.com/@bhupender.rawat4/python-redis-using-docker-45643af090db" >Python: Redis [ Using Docker ] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://realpython.com/python-redis/" >How to Use Redis With Python <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS: 用 AWS Lambda Function 開發 Serverless Line Bot - 1</title>
    <url>/2024/04/23/projects/line-bot-with-aws-lambda-functions-1/</url>
    <content><![CDATA[<p>過去在撰寫 Line Bot 我都是使用 Python 並且搭配後端框架，使用過 FastAPI 以及 Flask 做開發，都需要架起一個 Server 才能讓我們的 Line Bot 成功運行，此外還需要一台機器不斷地去幫我們運作才能處理 Line Bot 的請求，因此我轉向思考 Line Bot 的特性，Line Bot 就是透過用戶的傳遞訊息加以觸發回應，我們可以總結成三大要素：「用戶」、「觸發」、「回應」這三個關鍵字，因此我就想到了 AWS Lambda + API Gateway 的特性，當今天有用戶傳遞訊息給 Line Bot 時，透過 AWS Lambda Function 來觸發回應，這樣不就不需要架設 Server 了，還可以達成 Serverless 的概念，使用者用多少付多少，不用讓 Server 一直運作著。</p>
<p>我們將使用 <code>linebot.v3</code> 用以開發，並且使用 AWS Lambda Function 部署 Line Bot。以 AWS 作為範例，本篇將以 echo Bot 作為 Serverless Line Bot 的 Demo 講述設計原理以及 AWS 的使用，接著我們將介紹如何在 Serverless 的 Line Bot。</p>
<h3 id="使用-Flask-建構-Line-Bot"><a href="#使用-Flask-建構-Line-Bot" class="headerlink" title="使用 Flask 建構 Line Bot"></a>使用 Flask 建構 Line Bot</h3><p>我們需要先觀察，過去我們使用 Flask 建構一個 Line Bot 會需要的程式碼 (參考 <a class="link"   href="https://github.com/line/line-bot-sdk-python" >line-bot-sdk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> example - <a class="link"   href="https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo" >flask-echo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
<h4 id="Flask-app"><a href="#Flask-app" class="headerlink" title="Flask app"></a>Flask app</h4><p>透過 Flask 建立一個 Line Bot 的 Server，並且設定一個 <code>/callback</code> 的路由，當 Line Bot 收到用戶的訊息時，會透過 <code>/callback</code> 這個路由去承接 POST 請求。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/callback&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>():</span><br><span class="line">    <span class="comment"># get X-Line-Signature header value</span></span><br><span class="line">    signature = request.headers[<span class="string">&#x27;X-Line-Signature&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get request body as text</span></span><br><span class="line">    body = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">    app.logger.info(<span class="string">&quot;Request body: &quot;</span> + body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># handle webhook body</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        handler.handle(body, signature)</span><br><span class="line">    <span class="keyword">except</span> InvalidSignatureError:</span><br><span class="line">        app.logger.info(<span class="string">&quot;Invalid signature. Please check your channel access token/channel secret.&quot;</span>)</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="Line-Bot-WebhookHandler"><a href="#Line-Bot-WebhookHandler" class="headerlink" title="Line Bot WebhookHandler"></a>Line Bot WebhookHandler</h4><p>有了 Flask app 的 <code>callback</code> 路由，我們就可以透過 Line Bot SDK 的 <code>WebhookHandler</code> 來處理用戶的訊息，並且回應給用戶。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, request</span><br><span class="line"><span class="keyword">from</span> linebot.v3 <span class="keyword">import</span> WebhookHandler</span><br><span class="line"><span class="keyword">from</span> linebot.v3.exceptions <span class="keyword">import</span> InvalidSignatureError</span><br><span class="line"><span class="keyword">from</span> linebot.v3.messaging <span class="keyword">import</span> (ApiClient, Configuration, MessagingApi,</span><br><span class="line">                                  ReplyMessageRequest, TextMessage)</span><br><span class="line"><span class="keyword">from</span> linebot.v3.webhooks <span class="keyword">import</span> MessageEvent, TextMessageContent</span><br><span class="line"></span><br><span class="line">configuration = Configuration(access_token=os.environ[<span class="string">&quot;CHANNEL_ACCESS_TOKEN&quot;</span>])</span><br><span class="line">handler = WebhookHandler(os.environ[<span class="string">&quot;CHANNEL_SECRET&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">@handler.add(<span class="params">MessageEvent, message=TextMessageContent</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">with</span> ApiClient(configuration) <span class="keyword">as</span> api_client:</span><br><span class="line">        line_bot_api = MessagingApi(api_client)</span><br><span class="line">        line_bot_api.reply_message_with_http_info(</span><br><span class="line">            ReplyMessageRequest(</span><br><span class="line">                reply_token=event.reply_token,</span><br><span class="line">                messages=[TextMessage(text=event.message.text)]</span><br><span class="line">            )</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></div>

<p>看完了上述範例程式的原理之後，發 呼叫 <code>/callback</code> 這個路由就使使用 Web API 去完成我們要的動作！也就是這個關鍵，其實我們可以直接用 AWS Lambda + API Gateway 來取代 flask 的 Web Server，這樣就不需要架設 Server 了，接下來我們就來看看如何使用 AWS Lambda Function 部署 Line Bot。</p>
<h3 id="使用-AWS-Lambda-Function-部署-Line-Bot"><a href="#使用-AWS-Lambda-Function-部署-Line-Bot" class="headerlink" title="使用 AWS Lambda Function 部署 Line Bot"></a>使用 AWS Lambda Function 部署 Line Bot</h3><p>因為 Line Bot 會需要 <code>line-bot-sdk</code> 進行開發，這對 AWS Function 來說需要第三方函式庫，我們便需要將需要的函示庫打包成 Lambda Layer 形式上傳，以此讓我們的 Lambda Function 可以引用這些函式庫。</p>
<p>我們這次選用的 Python Runtime 是 Python3.12，<a class="link"   href="https://repost.aws/knowledge-center/lambda-import-module-error-python" >運行在 Amazon Linux 2023 Amazon Machine Image (AMI) 上。因此我們要確保 Layer 是可以在 Amazon Linux 2023 操作系統上運行的 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，因此我們打包第三方套件的方式會跟從前不一樣。</p>
<p>以下是我們打包 <code>line-bot-sdk</code> 的方式：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p lambda-layer/python</span><br><span class="line">$ <span class="built_in">cd</span> lambda-layer/python</span><br><span class="line">$ pip3 install --platform manylinux2014_x86_64 --target . --python-version 3.12 --only-binary=:all: line-bot-sdk</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ zip -r ./lambda_layers/linebot_lambda_layer.zip python</span><br></pre></td></tr></table></figure></div>

<p>製作好後，我們就可以上傳 Layer 到 AWS Lambda Function，接著我們就可以開始撰寫 Line Bot 的 Lambda Function。</p>
<h4 id="lambda-handler"><a href="#lambda-handler" class="headerlink" title="lambda_handler"></a>lambda_handler</h4><p>我們可以把 lambda_handler 想成當初的 <code>callback/</code> 路由，負責將承接從 Line Bot 過來的請求，並且可以透過 <code>WebhookHandler</code> 來處理用戶的訊息，可以想像成我們的主程式運行的地方。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        body = event[<span class="string">&#x27;body&#x27;</span>]</span><br><span class="line">        signature = event[<span class="string">&#x27;headers&#x27;</span>][<span class="string">&#x27;x-line-signature&#x27;</span>]</span><br><span class="line">        handler.handle(body, signature)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">201</span>,</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="string">&#x27;Hello from Lambda!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="built_in">str</span>(e))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Line-Bot-WebhookHandler-1"><a href="#Line-Bot-WebhookHandler-1" class="headerlink" title="Line Bot WebhookHandler"></a>Line Bot WebhookHandler</h4><p>有了可以承接請求的 <code>lambda_handler</code>，我們就可以透過 Line Bot SDK 的 <code>WebhookHandler</code> 來處理用戶的訊息，並且回應給用戶。我們做的是將 Text 相關的訊息做處理，並且回傳給用戶。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> linebot.v3 <span class="keyword">import</span> WebhookHandler</span><br><span class="line"><span class="keyword">from</span> linebot.v3.messaging <span class="keyword">import</span> (ApiClient, Configuration, MessagingApi,</span><br><span class="line">                                  ReplyMessageRequest, TextMessage)</span><br><span class="line"><span class="keyword">from</span> linebot.v3.webhooks <span class="keyword">import</span> MessageEvent, TextMessageContent</span><br><span class="line"></span><br><span class="line">configuration = Configuration(</span><br><span class="line">    access_token=os.getenv(<span class="string">&#x27;CHANNEL_ACCESS_TOKEN&#x27;</span>))</span><br><span class="line">handler = WebhookHandler(os.getenv(<span class="string">&#x27;CHANNEL_SECRET&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@handler.add(<span class="params">MessageEvent, message=TextMessageContent</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">with</span> ApiClient(configuration) <span class="keyword">as</span> api_client:</span><br><span class="line">        line_bot_api = MessagingApi(api_client)</span><br><span class="line">        </span><br><span class="line">        line_bot_api.reply_message_with_http_info(</span><br><span class="line">            ReplyMessageRequest(</span><br><span class="line">                reply_token=event.reply_token,</span><br><span class="line">                messages=[TextMessage(text=event.message.text)]</span><br><span class="line">            )</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></div>

<h3 id="實作流程與細節"><a href="#實作流程與細節" class="headerlink" title="實作流程與細節"></a>實作流程與細節</h3><p>在我們了解到如何使用 AWS Lambda Function 部署 Line Bot 之後，我們就可以開始實作了，以下是我們的實作流程與細節以及架構圖：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/arch.png"
                     
                ></p>
<h4 id="建立-Line-Bot"><a href="#建立-Line-Bot" class="headerlink" title="建立 Line Bot"></a>建立 Line Bot</h4><p>前往 <a class="link"   href="https://account.line.biz/login?redirectUri=https://manager.line.biz/" >Line Business 登入管理頁面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，登入後直接點擊建立</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/01.png"
                     
                ></p>
<p>進到 「聊天」前往回應設定頁面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/02.png"
                     
                ></p>
<p>接著點擊「Messaging API」</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/03.png"
                     
                ></p>
<p>進入設定頁面，並且向下滑找到 <a class="link"   href="https://developers.line.biz/" >Line Developers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 點擊後找到 <a class="link"   href="https://developers.line.biz/console/" >Console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 進入，我們要拿到 Channel Secrets 以及 Channel Access Token 可以想像我們要拿到 Line Bot 的鑰匙。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/04.png"
                     
                ></p>
<p>我們進去 Console 後直接往下就可以找到 Channel Secrets，可以先複製起來我們待會需要用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/05.png"
                     
                ></p>
<p>再來我們去 Messaging API 頁面滑到最下面找到 Channel Access Token，這是我們的 Line Bot 的身份證，我們待會也需要用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/06.png"
                     
                ></p>
<h4 id="建立-AWS-Lambda-Function"><a href="#建立-AWS-Lambda-Function" class="headerlink" title="建立 AWS Lambda Function"></a>建立 AWS Lambda Function</h4><p>前往 <a class="link"   href="https://aws.amazon.com/tw/console/" >AWS Console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 登陸，並且進到 Lambda 頁面（可自行選擇 Region），點擊建立函式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/07.png"
                     
                ></p>
<p>可自行命名 <code>function-name</code> Runtime 選擇 <code>Python3.12</code> Architecture 選擇 <code>x86_64</code>，並且點擊建立函式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/08.png"
                     
                ></p>
<h4 id="連結-Layer"><a href="#連結-Layer" class="headerlink" title="連結 Layer"></a>連結 Layer</h4><p>建立好 Lambda Function 後我們需要為我們的 Function 加上裝備，也就是我們要能夠支援第三的函式庫，因此我們要前往 Layer 頁面，點擊建立 Layer。</p>
<p>可以透過以下腳本建立 <code>linebot_lambda_layer.zip</code> 的 Layer</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p lambda-layer/python</span><br><span class="line">$ <span class="built_in">cd</span> lambda-layer/python</span><br><span class="line">$ pip3 install --platform manylinux2014_x86_64 --target . --python-version 3.12 --only-binary=:all: line-bot-sdk</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ zip -r ./lambda_layers/linebot_lambda_layer.zip python</span><br></pre></td></tr></table></figure></div>

<p>也可以直接透過 👉🏻 <a class="link"   href="https://raw.githubusercontent.com/1chooo/aws-educate-101-line-bot/main/lambda_layers/linebot_lambda_layer.zip" >Download linebot_lambda_layer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 直接下載</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p><strong>⚠️ 注意</strong></p>
<p>我們是用 <code>x86_64</code> 作為 Architect，如果當初選 arm 可能會出現 error</p>

  </div>

<p>可自行設定名稱、描述，直接透過上傳 <code>.zip</code> 的方式，Architecture 選擇 <code>x86_64</code>，Runtime 選擇 <code>Python3.12</code>，並且點擊建立 Layer。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/09.png"
                     
                ></p>
<p>最後幫我回到 Lambda Function 拉到最下面點擊新增 Layer，並且選擇 <code>Custom Layer</code> 即可連結 Layer。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/10.png"
                     
                ></p>
<h4 id="編輯-Lambda-Function"><a href="#編輯-Lambda-Function" class="headerlink" title="編輯 Lambda Function"></a>編輯 Lambda Function</h4><p>有了以上的設定之後我們就可以把之前所寫好的 lambda_handler 貼上去，記得要點擊 <code>Deploy</code> 否則不會生效。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> linebot.v3 <span class="keyword">import</span> WebhookHandler</span><br><span class="line"><span class="keyword">from</span> linebot.v3.messaging <span class="keyword">import</span> (ApiClient, Configuration, MessagingApi,</span><br><span class="line">                                  ReplyMessageRequest, TextMessage)</span><br><span class="line"><span class="keyword">from</span> linebot.v3.webhooks <span class="keyword">import</span> MessageEvent, TextMessageContent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">configuration = Configuration(</span><br><span class="line">    access_token=os.getenv(<span class="string">&#x27;CHANNEL_ACCESS_TOKEN&#x27;</span>))</span><br><span class="line">handler = WebhookHandler(os.getenv(<span class="string">&#x27;CHANNEL_SECRET&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@handler.add(<span class="params">MessageEvent, message=TextMessageContent</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">with</span> ApiClient(configuration) <span class="keyword">as</span> api_client:</span><br><span class="line">        line_bot_api = MessagingApi(api_client)</span><br><span class="line">        </span><br><span class="line">        line_bot_api.reply_message_with_http_info(</span><br><span class="line">            ReplyMessageRequest(</span><br><span class="line">                reply_token=event.reply_token,</span><br><span class="line">                messages=[TextMessage(text=event.message.text)]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        body = event[<span class="string">&#x27;body&#x27;</span>]</span><br><span class="line">        signature = event[<span class="string">&#x27;headers&#x27;</span>][<span class="string">&#x27;x-line-signature&#x27;</span>]</span><br><span class="line">        handler.handle(body, signature)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="string">&#x27;Hello from Lambda!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="built_in">str</span>(e))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>再來我們要把之前從 Line 拿到的鑰匙 <code>CHANNEL_ACCESS_TOKEN</code> 以及 <code>CHANNEL_SECRET</code>，設定成為環境變數。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/11.png"
                     
                ></p>
<h4 id="設定-API-Gateway"><a href="#設定-API-Gateway" class="headerlink" title="設定 API Gateway"></a>設定 API Gateway</h4><p>前往 API Gateway 頁面，點擊建立 API，並且選擇 <code>REST API</code>，點擊建立 API，可行命名 API 的名稱。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/12.png"
                     
                ></p>
<p>創建好後我們要 Create Method 並且選擇 <code>POST</code>，並且點擊建立。</p>
<p>Method Type 選擇 <code>POST</code>，Integration Type 選擇 <code>Lambda function</code>，勾選 <code>Use Lambda Proxy integration</code>，並且選擇剛剛建立的 Lambda Function，並且點擊建立。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/13.png"
                     
                ></p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p><strong>⚠️ 注意</strong></p>
<p>一定要勾選 Use Lambda Proxy integration，如果勾選起來的話，會將其他 Http request Header 中的資訊也帶入 AWS Lambda，如果沒勾選 AWS Lambda 只會收到 Body tag 中的值。因為 Line Bot 會需要用到在 header 中的 <strong>x-line-signature</strong>，所以會需要勾選此選項。</p>

  </div>

<p>建立好後，回到 API Gateway 頁面，點擊 Deploy API，並且選擇 New Stage，輸入 <code>prod</code> 點擊 Deploy，我們會拿到一個連結，這個連結就是我們的 API Gateway 的 Endpoint，我們要把這個 Endpoint 貼到 Line Bot 的 Webhook URL。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/14.png"
                     
                ></p>
<h4 id="設定-Line-Bot-Webhook-URL"><a href="#設定-Line-Bot-Webhook-URL" class="headerlink" title="設定 Line Bot Webhook URL"></a>設定 Line Bot Webhook URL</h4><p>我們將剛剛拿到的 API Gateway 的 Endpoint 貼到 Line Bot 的 Webhook URL，就可以開始使用 Line Bot 了。我們需要回到<a class="link"   href="https://developers.line.biz/console/" >Line Developers Console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 進入，前往到 Messaging API 分頁，貼上我們的 Webhook URL 並且要點擊 <code>Allow Webhook</code>，這樣我們的 Line Bot 就可以開始運作了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/15.png"
                     
                ></p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>最後我們看 Demo 吧！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post/projects/line-bot-with-aws-lambda-functions-1/demo.jpg"
                     
                ></p>
<p>恭喜大家完成了 Serverless Line Bot 的部署，這樣就不需要架設 Server 了，也可以達成 Serverless 的概念，使用者用多少付多少，不用讓 Server 一直運作著。不過大家會不會覺得機器人只會回應我們傳的內容有點太單調，下一篇我們將會介紹如何在我們的 Line Bot 中加入 Large Language Model 達到更高的互動性。</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>這篇真的花了非常多的時間，讓我想起了之前在 AWS 擔任校園大使準備技術工作坊的時光，希望這篇文章能夠帶給大家認識雲的開發，並且也能成功完成一個 Line Bot 的小 project。另外工商一下這屆大使正在籌辦 證照的計畫，如果有對於最入門的 <a class="link"   href="https://aws.amazon.com/certification/certified-cloud-practitioner/" >AWS Certified Cloud Practitioner（CCP） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和技術相關的 <a class="link"   href="https://aws.amazon.com/tw/certification/certified-solutions-architect-associate/" >AWS Certified Solutions Architect - Associate（SAA） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>有興趣的朋友都可以透過 👉🏻 <a class="link"   href="https://www.surveycake.com/s/6dWGq" >報名連結 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，加入證照陪跑計劃！</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Lambda Function</tag>
        <tag>Serverless</tag>
        <tag>API Gateway</tag>
        <tag>Line Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>做個小貪吃蛇來玩吧！</title>
    <url>/2023/07/30/projects/snake-game/</url>
    <content><![CDATA[<p>還記得當時剛學習程式語言的時候，對於什麼知識都不懂，連搜尋能力也沒有，常常搜不到關鍵字，問題也解決不了，不過當時懵懂無知的狀態，完成了基礎貪吃蛇的小遊戲，所以決定撰寫一篇文章來記錄當時的過程。</p>
<p><strong>本文綱要</strong></p>
<ul>
<li><a href="#%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE">環境建置</a><ul>
<li><a href="#%E5%AE%98%E7%B6%B2%E9%80%A3%E7%B5%90">官網連結：</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A5%E8%91%97%E5%B0%B1%E9%96%8B%E5%A7%8B%E5%BB%BA%E7%AB%8B%E7%92%B0%E5%A2%83%E5%90%A7">接著就開始建立環境吧！</a></li>
<li><a href="#%E5%AF%A6%E4%BD%9C%E8%AA%AA%E6%98%8E">實作說明</a></li>
<li><a href="#%E5%AF%A6%E4%BD%9C%E6%84%9F%E6%83%B3">實作感想</a></li>
<li><a href="#%E6%9B%B4%E6%96%B0%E5%B0%88%E6%A1%88%E5%BE%8C%E7%BA%8C%E7%99%BC%E5%B1%95">（更新）專案後續發展</a></li>
<li><a href="#%E9%87%8D%E6%A7%8B%E5%BF%83%E5%BE%97">重構心得</a><ul>
<li><a href="#source-code-in-github-python_snake_game">Source Code in GitHub: python_snake_game</a></li>
</ul>
</li>
</ul>
<h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><p>實作這次的小遊戲是透過 Python 語言的套件：Pygame 來實現的，不過途中會遇到很多的版本問題，起源於 Pygame 本身版本相容性，因此我們要測試出能夠正常執行的版本，過程中不斷地嘗試，也不斷地失敗，最後才找出了解決方案，那就是透過 Conda 的環境來建置。</p>
<p>選擇安裝 Conda 版本，這邊選擇的是 MiniConda，因為本身不太需要原本 Conda 如此龐大的功能，因此選擇瘦身版的，再加上 Mac 的儲存空間著實珍貴啊！選用的版本為 <code>conda 4.12.0</code>，直接前往官網安裝相對應作業系統版本即可。</p>
<h4 id="官網連結："><a href="#官網連結：" class="headerlink" title="官網連結："></a>官網連結：</h4><p><a class="link"   href="https://docs.conda.io/en/latest/miniconda.html" >Miniconda Docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="接著就開始建立環境吧！"><a href="#接著就開始建立環境吧！" class="headerlink" title="接著就開始建立環境吧！"></a>接著就開始建立環境吧！</h2><p>我們先確認 Conda 版本，在終端機輸入 <code>conda --version</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*1uDdGsxFlihzmPfLP6Mo4A.webp"
                     
                ></p>
<p>接著透過 Conda 建立名為 pygame 的虛擬環境，Python 的版本選用 <code>3.16.13</code> 並且激活執行該環境。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create --name pygame python=3.6.13</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate pygame</span></span><br></pre></td></tr></table></figure></div>

<p>確認 Python 版本，並且開始安裝我們需要的套件，如果把–user 省略，會直接安裝至 Conda 的環境。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python --version</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -m pip install -U pygame --user</span></span><br></pre></td></tr></table></figure></div>

<p>最後已經到了最後一步了，我們只要測試 pygame 能否正常運作便大功告成了，所以我們要執行 pygame 可以直接呼叫的小遊戲。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -m pygame.examples.aliens</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*xRYWm3kCCimYkrsHfh88KA.webp"
                     
                ></p>
<h2 id="實作說明"><a href="#實作說明" class="headerlink" title="實作說明"></a>實作說明</h2><p>前面做了這麼多的前置作業，那我們就開始進行實作吧！我們的順序會先引入套件，設定鍵盤方向鍵的接收，最後進行一連串的遊戲玩法設定，就大功告成啦！完整程式碼都放在 GitHub 給大家參考啦！畢竟全部放進文章，會變成流水帳，最後只要在終端機輸入 python main.py ，就可以正常執行貪吃蛇小遊戲囉！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*okV2P3qTibFMO1NWbaRBJQ.webp"
                     
                ></p>
<h2 id="實作感想"><a href="#實作感想" class="headerlink" title="實作感想"></a>實作感想</h2><p>當下實作程式碼，說真的也不完全是自己的東西，大多數的東西都要透過參考他人的實作來完成，不過在程式碼實作初期，環境崩掉的時候真的很讓人崩潰，只能不斷 conda remove -n env_name -all ，一直 rebuild，不過這過程中真的可以學到很多內容，可以更了解 python 語言的版本相應關係，以及要如何管理自己電腦環境（雖然現在環境依舊混亂～嘿嘿～）。</p>
<p>那在程式語言方面，練習到了物件導向的概念，可以把很多東西看成是一個個的物件，並且有分類的關係，即便當時看不太懂，但還是很有成就感，畢竟這是第一個小專案，能夠感受到不斷學習的狀態，這已經夠讓我珍惜了！未來也還會繼續分享專案實作，並且做更多深入地探究，繼續在電腦科學的道路上前行、突破！</p>
<hr>
<h2 id="（更新）專案後續發展"><a href="#（更新）專案後續發展" class="headerlink" title="（更新）專案後續發展"></a>（更新）專案後續發展</h2><p>現在時間是 2023 年初，過新年便有項恆年不變的傳統，那就是要「除舊佈新」，想當然爾過往的專案在此刻便會重出江湖，況且現在距離上次改動專案也隔了半年以上，寫程式碼的習慣也會因為參考了更多人的寫法而有所改動，因此在原有程式架構不變的情景下，將原本的程式碼重構，寫成呼叫物件的形式，以下便會直接透過程式碼說明，另外撰寫這段文字的時候也發現 Medium 改動了嵌入程式碼的方式，現在無需上傳到 GitHub Gist 也可以將程式碼顯示有 Syntax 的樣貌了，那我們就開始展開說明吧！</p>
<ul>
<li><p>將貪吃蛇的移動獨立成 <code>Direction.py</code></p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Direction</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line"></span><br><span class="line">    RIGHT = <span class="number">1</span></span><br><span class="line">    LEFT = <span class="number">2</span></span><br><span class="line">    UP = <span class="number">3</span></span><br><span class="line">    DOWN = <span class="number">4</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>將遊戲的主要規則程式寫入 <code>SnakeGame.py</code></p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Direction <span class="keyword">import</span> Direction</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">font = pygame.font.Font(<span class="string">&#x27;../src/arial.ttf&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, <span class="string">&#x27;x, y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rgb colors</span></span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">RED = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">BLUE1 = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">BLUE2 = (<span class="number">0</span>, <span class="number">100</span>, <span class="number">255</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">20</span></span><br><span class="line">SPEED = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnakeGame</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, w=<span class="number">640</span>, h=<span class="number">480</span></span>):</span><br><span class="line">        self.w = w</span><br><span class="line">        self.h = h</span><br><span class="line">        <span class="comment"># init display</span></span><br><span class="line">        self.display = pygame.display.set_mode((self.w, self.h))</span><br><span class="line">        pygame.display.set_caption(<span class="string">&#x27;Snake&#x27;</span>)</span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># init game state</span></span><br><span class="line">        self.direction = Direction.RIGHT</span><br><span class="line"></span><br><span class="line">        self.head = Point(self.w / <span class="number">2</span>, self.h / <span class="number">2</span>)</span><br><span class="line">        self.snake = [self.head, Point(self.head.x - BLOCK_SIZE, self.head.y),</span><br><span class="line">                    Point(self.head.x - (<span class="number">2</span> * BLOCK_SIZE), self.head.y)]</span><br><span class="line"></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.food = <span class="literal">None</span></span><br><span class="line">        self._place_food()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_place_food</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(<span class="number">0</span>, (self.w - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE</span><br><span class="line">        y = random.randint(<span class="number">0</span>, (self.h - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        self.food = Point(x, y)</span><br><span class="line">        <span class="keyword">if</span> self.food <span class="keyword">in</span> self.snake:</span><br><span class="line">            self._place_food()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play_step</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. collect user input</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                quit()</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                    self.direction = Direction.LEFT</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                    self.direction = Direction.RIGHT</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                    self.direction = Direction.UP</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    self.direction = Direction.DOWN</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. move</span></span><br><span class="line">        self._move(self.direction)  <span class="comment"># update the head</span></span><br><span class="line">        self.snake.insert(<span class="number">0</span>, self.head)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. check if game over</span></span><br><span class="line">        gameOver = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self._is_collision():</span><br><span class="line">            gameOver = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> gameOver, self.score</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. pace new food or just move</span></span><br><span class="line">        <span class="keyword">if</span> self.head == self.food:</span><br><span class="line">            self.score += <span class="number">1</span></span><br><span class="line">            self._place_food()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.snake.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. update ui and clock</span></span><br><span class="line">        self._update_ui()</span><br><span class="line">        self.clock.tick(SPEED)</span><br><span class="line">        <span class="comment"># 6. return gameOver and score</span></span><br><span class="line">        <span class="keyword">return</span> gameOver, self.score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_collision</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># hits boundary</span></span><br><span class="line">        <span class="keyword">if</span> self.head.x &gt; self.w - BLOCK_SIZE <span class="keyword">or</span> self.head.x &lt; <span class="number">0</span> <span class="keyword">or</span> self.head.y &gt; self.h - BLOCK_SIZE <span class="keyword">or</span> self.head.y &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># hits itself</span></span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">in</span> self.snake[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_ui</span>(<span class="params">self</span>):</span><br><span class="line">        self.display.fill(BLACK)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pt <span class="keyword">in</span> self.snake:</span><br><span class="line">            pygame.draw.rect(self.display, BLUE1, pygame.Rect(pt.x, pt.y, BLOCK_SIZE, BLOCK_SIZE))  <span class="comment"># 東西南北</span></span><br><span class="line">            pygame.draw.rect(self.display, BLUE2, pygame.Rect(pt.x + <span class="number">4</span>, pt.y + <span class="number">4</span>, <span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">        pygame.draw.rect(self.display, RED, pygame.Rect(self.food.x, self.food.y, BLOCK_SIZE, BLOCK_SIZE))</span><br><span class="line"></span><br><span class="line">        text = font.render(<span class="string">&quot;Score: &quot;</span> + <span class="built_in">str</span>(self.score), <span class="literal">True</span>, WHITE)</span><br><span class="line">        self.display.blit(text, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move</span>(<span class="params">self, direction</span>):</span><br><span class="line">        x = self.head.x</span><br><span class="line">        y = self.head.y</span><br><span class="line">        <span class="keyword">if</span> direction == Direction.RIGHT:</span><br><span class="line">            x += BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.LEFT:</span><br><span class="line">            x -= BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.DOWN:</span><br><span class="line">            y += BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.UP:</span><br><span class="line">            y -= BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        self.head = Point(x, y)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最後創建 <code>main.py</code> 呼叫所有內容，便可向原先依樣正常執行啦！</p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SnakeGame <span class="keyword">import</span> SnakeGame</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    game = SnakeGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># game loop</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gameOver, score = game.play_step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gameOver == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Final Score&#x27;</span>, score)</span><br><span class="line"></span><br><span class="line">    pygame.quit()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>此時在終端機執行 <code>python3 main.py</code> 也會出現相同的畫面呢！</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*okV2P3qTibFMO1NWbaRBJQ.webp"
                     
                ></p>
<h2 id="重構心得"><a href="#重構心得" class="headerlink" title="重構心得"></a>重構心得</h2><p>這次會想要重構程式碼，便是因為 2022 後半年使用 python3 完成了一個新的專案，也在過程中才更認識 python3 類別的應用以及開發所需注意的小細節，所以才回想起曾經做過的小專案，嘗試將後續所學到的內容更應用在程式碼撰寫上，也增加自己多一次的經驗累積。</p>
<h3 id="Source-Code-in-GitHub-python-snake-game"><a href="#Source-Code-in-GitHub-python-snake-game" class="headerlink" title="Source Code in GitHub: python_snake_game"></a>Source Code in GitHub: <a class="link"   href="https://github.com/1chooo/junk-project/tree/main/python_snake_game" >python_snake_game <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3>]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>剛上大學的我如何挑到適合我的平板！？</title>
    <url>/2023/07/30/talks/freshman-pick-up-ipad/</url>
    <content><![CDATA[<p>疫情嚴峻的 2021 年中，所有戶外活動皆需要暫停，身為大一生，參與的校園活動被迫中止，連課程都改為遠距教學，學習方法勢必有所改變</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*f2BkDSANBT2XUGEzR-1_gw.jpeg"
                      alt="My iPad 8 !!!"
                ><figcaption>My iPad 8 !!!</figcaption></figure></p>
<h3 id="購買前所做的準備"><a href="#購買前所做的準備" class="headerlink" title="購買前所做的準備"></a>購買前所做的準備</h3><p>上大學前，在挑選筆電的時候選擇了 MacBookPro 2020 13”，然而追求輕便的我，面對剛上大學一連串的教科書非常不適應，只要去圖書館或咖啡廳看書就要背著一大堆厚厚一疊的書，因此很傾向電子化的讀書方式，因此一直在考慮要買一台 iPad 來輔助我學習。</p>
<p>本來就在觀望iPad 的我，在疫情爆發全國遠距教學的背景下，便有了相當合適的契機購入了人生第一台 iPad，而購買的版本是 2020 年發行的第八代，容量為 128GB，接下來會先分享購買前的事前準備以及分享這生產力工具帶給我學習方法和生活方式的變化。</p>
<p>說到 iPad，常常聽到一句話買前生產力；買後愛奇藝或者是效能過剩這類的話，然而這類的話語大多出現在 iPad Pro 及 iPad Air 這類的機型，較少篇幅在描述最入門的款式，而剛好我所使用的機型便較不受此討論範疇，而最終也是我選購平板。</p>
<p>那接著來說說我是為何選購這台平價入門款的平板吧！</p>
<p>當下要購買平板的我卡在一個尷尬的時間點，而這時間點正逢新款 iPad Pro和大專生暑期活動——Back to School，這兩件大事之前，心裡的想法就是：科技產品買新不買舊、我都忍了快一年不入手 iPad Pro 了，當然要買最新的啊！、剛好暑假的活動可以送耳機，我需要那個酷東西。諸如此類的想法充斥在我的腦海中，不偏不倚正值遠距上課的高峰期，對於每天線上上課的狀態，我更充分展現了平板的需求，所以這時候才妥協：「既然買不到最新的 iPad Pro，享受不到蘋果的耳機優惠，我也沒有很想多貼錢換 iPad Air，那不然我就換最便宜的 iPad就好了！」（其實當時很多科技產品都缺貨，蘋果的平板也因為遠距非常熱賣，大多數規格都缺貨了），於是在如此掙扎之後就開始了和我的新學習夥伴的生活。</p>
<h3 id="學習方法和生活方式的變化"><a href="#學習方法和生活方式的變化" class="headerlink" title="學習方法和生活方式的變化"></a>學習方法和生活方式的變化</h3><p>那在前段文章分享完我購買平板當下的心境後，接著就來說說我的學習方法吧！其實我的學習方法並未有所差異性的改變，一如既往，依舊是在課後做著課後所需的練習、公式相關的推導，畢竟一直以來都沒有上課抄寫老師黑板上所講述的內容，這或許可以用下個篇幅來分享為什麽我不抄筆記～～～小組討論時，可以快速地記下註記把大家的短時間內產出的內容快速記下來以不致於遺漏；至於生活方法的話，偶爾可以在平板畫點小圖案，畢竟平板可以不受限於紙張條件，也可以快速更換畫筆的顏色，所以畫點小圖可說是非常便利呢！哦還有個至關重要的那就是每日的 TODO List，因為平板的便利，就可以在各個場合之下查看當日的待辦事項，或是目標進度，不需要再從書包裡掏出筆記本來查看，再來就是，書包變輕也變整潔了，因為不用在背更多書本、紙張，頂多就是平板、筆電、充電器就能出門了！</p>
<h3 id="我的觀點結論"><a href="#我的觀點結論" class="headerlink" title="我的觀點結論"></a>我的觀點結論</h3><p>綜上經驗，平板對於我的日常是有達到幫助的，不過其實可以很坦白地說：「平板是真的方便，不過有沒有買是真的沒什麼差！！！」方便性這點就是可以隨時隨地做筆記，打開平板就能隨時查看需要的資料，再加上有些講義也是電子的形式，所以就更為方便了，那為何還有後面那句話呢？就是其實買平板不會變得特別認真，也不會讀得更好，就只是讀書的形式變了，但本質並未作改變，在大學要想學得更多，完全端看自己的讀書習管以及方法，平板並不會帶來太多的改變，也可能是我的使用情境頂多寫寫數學算式，做做統整、小筆記，所以這些完全紙本也能應付，所以才有此說法，並沒有像網路上很多開箱的人所說的這麼神。</p>
<p>所以我滿慶幸自己買到的平板是入門款的，無論是入門或是高規的平板，對於大多數人的需求而言都已經很足夠了，只有一點小小抱怨：「就是這台平版螢幕沒有全貼和，看劇體驗頗差的」看劇還是都用 MacBook Pro 看（蘋果筆電螢幕就是舒服！），在日常書寫真的沒有差太多，書寫完的樣子根本沒什麼差別，所以單就一般文書處理、寫寫筆記，真的真心話：「入門款就夠用了，把錢省了吧！」。</p>
<p>最後想給看到這篇的人購買建議就是：「其實一個產品在很多時候，任何人都會有不同的推薦、或是貶低，但一個產品到底需不需要購買，最重要的還是自己的需求。」與其看更多別人的使用場景，不如問問自己的吧！</p>
<h3 id="本文後續"><a href="#本文後續" class="headerlink" title="本文後續"></a>本文後續</h3><p>更一個後續，這篇文由於是第一次撰寫，共經歷了大一、大二階段才撰寫完成的，之後一定會有一篇詳細介紹我的讀書、辦公環境的，文章裡一定會提到更多我學習相關的內容的！</p>
]]></content>
      <categories>
        <category>Talks</category>
      </categories>
      <tags>
        <tag>ipad</tag>
        <tag>Apple</tag>
        <tag>Freshman</tag>
      </tags>
  </entry>
  <entry>
    <title>平板能輔助大學生上課嗎？</title>
    <url>/2023/07/30/talks/no-book-in-uni/</url>
    <content><![CDATA[<blockquote>
<p>誒～怎麼身邊上課的人開始都不帶書了！？</p>
</blockquote>
<p>大學生上大學到底要不要買平板來輔助學習，這個話題其實一直被討論著，現在也是不斷地被拿出來討論，沒有特定一個答案，於是賀編決定撰寫這篇文章，並結合就讀中央的期間，身邊所被討論過的內容以及自己的一些經驗（賀編本身有使用平板輔助的習慣）。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*tg5IdfMpb60zbPonfmZHXQ.jpeg"
                      alt="pexels-cottonbro-4065171.jpg"
                ><figcaption>pexels-cottonbro-4065171.jpg</figcaption></figure></p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>使用平板在大學生多數場景可以大致上分為兩個，第一個為課堂上，第二個是課堂外。</p>
<h3 id="課堂上："><a href="#課堂上：" class="headerlink" title="課堂上："></a>課堂上：</h3><p>課堂上有平板的同學，可以臨時做筆記，快速記筆記，如果需要修改可以馬上修改，不用塗塗改      改，不會像傳統紙張、筆記本，可能需要用立可帶塗掉，甚至老師突然補述先前提及的內容也可以馬  上做修正，不會發生沒空間抄寫的問題。</p>
<p>臨時需要查找資料時也可以快速從平板搜尋，不需要從書包裡翻找出之前記錄過的內容。</p>
<p>另外有些學院的教授開始把教材變成電子檔，用平板的同學可以快速地在教材上記錄下重點，而不需要在上課前先去將教材印出來，而且忘記帶講義的時候，可以即時下載資料，避免發生在上課時沒有資料的慘況發生⋯⋯</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Ba2Sy3vX6mH29pfLNb4MNA.png"
                      alt="Screen Shot 2022-07-03 at 11.09.13 PM.png"
                ><figcaption>Screen Shot 2022-07-03 at 11.09.13 PM.png</figcaption></figure></p>
<h3 id="課堂外："><a href="#課堂外：" class="headerlink" title="課堂外："></a>課堂外：</h3><p>描述完課堂上的使用場景，來說說課堂外的使用吧！這時候大家做常聽到的說詞「買前生產力；買後愛奇藝」便會悄悄地晃到我們耳邊，不過我們本篇文章還是預設大家的使用場景是用來輔助學習，雖說好的放鬆時光也是推進我們向前的一大動力，哈！不過我們還是回到正題吧！</p>
<p>賀編本身是理工學院相關科系的，所以自身及身邊的同學使用量最大的場景便是計算繁雜的數學算式，甚至是公式推導，畢竟要複習課程中的內容，還有迫於時間因素，教授也未必會在課堂上將完整算式做推導，畢竟在大學裡可能隨便一個小小的算式用上幾張計算紙都算是家常便飯，於是平板這時便能發揮所長，可以快速翻閱資料，寫錯也可以快速塗改（例如：從計算的剛開頭就算錯的時候⋯⋯還有漏寫算式的時候⋯⋯）</p>
<p>講完了理工學院相關科系，來講個所有學院都將面臨到的使用情景「讀Paper」，這能帶到平板的一大功能「閱讀」，很多人都會透過平板做大量的閱讀，無論是文獻，又或者是自己的愛好書籍，一台平板，可以抵掉很多書籍的重量，又可以隨時隨地閱讀。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*gRyheXK1Zr4o7nzUNgl69Q.jpeg"
                      alt="pexels-rfstudio-3060654.jpg"
                ><figcaption>pexels-rfstudio-3060654.jpg</figcaption></figure></p>
<h2 id="價格及挑選"><a href="#價格及挑選" class="headerlink" title="價格及挑選"></a>價格及挑選</h2><p>平板的挑選也可以分為兩大類，第一個是Apple，另一個則是Android，其實無論是哪個類別的平板都需要投入金錢的成本，不過結合賀編，以及身邊還有訪問過的人的經驗，可以總結出兩個結論：</p>
<ol>
<li>財力</li>
<li>習慣</li>
</ol>
<p>首先來講述第一點「財力」，其實說老實話上述提及過的場景，只要有支觸控筆加上平板便能應付大多數的需求，所以不論Apple系統又或者是Android系統的高階、中階、低階平板都能夠負荷，因此挑選平板可以考量自己的經濟能力，想要比較新穎的功能或者其他需求，可能就得多多捏一點上更好的規格，哈！</p>
<p>另外換講述第二點「習慣」，Apple系統或者Android系統，本就是兩大陣營，早就經歷很多次的比較、爭辯，各有各自的擁護者，還是回到老話一句，其實只要有支觸控筆加上平板便能應付大多數的需求，因此自己習慣哪個系統，便可朝那個方向做挑選。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*RZ1xmhqrFefd5ffypyGVjw.jpeg"
                      alt="1333cba4be91a78d0d1db873ea6cc980.jpg"
                ><figcaption>1333cba4be91a78d0d1db873ea6cc980.jpg</figcaption></figure></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上分享了一些賀編生活的案例，以及跟身邊討論、聊天提及到的情況，其實要不要買平板，這個話題真的太多人討論了，那要不要買真的端看個人習慣，平板雖說方便，可有一點就是完全無法取代，那便是「在紙張書寫的觸感」，許多人學習就喜歡觸碰實體書籍的感覺，況且要做好學問，無論是紙張或是平板都有辦法做好，再怎麼說平板就是個輔助學習的工具，賀編想近期會又這麼多討論，大概便是順應現在時代的變遷，學習的路徑加上了一個工具選項可以做嘗試，可能唯一能給到的建議，就是可以多爬些文章做比較，網路上還有很多很好的文章以及影片，一切端看自己的需求，以及財力，來做對自己好的決定。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e11db370-730a-4b13-89ce-bde047c05b8c/pexels-mikhail-nilov-6931023.jpg"
                      alt="pexels-mikhail-nilov-6931023.jpg"
                ><figcaption>pexels-mikhail-nilov-6931023.jpg</figcaption></figure></p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>文章下完結論後來分享一個賀編看到的一個有趣的經驗，在剛從大一升到大二時，班上的瞬間多了很多平板，超過半數的同學都買了平板，而且幾乎都是Ipad，多數同學都是搭上了Apple的「Back to school」方案做購買，這是大專學院的專屬優惠，如果暑假想要添購新設備的同學可以多多關注，可以少捏一點上好一點的設備，當然這個活動也不只平板啦！可以自行去官網看看哦～</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2tMD7NLX88PVvklYR2t_hg.jpeg"
                      alt="1655899178-f039f51cb6c66a067487eb6aacf97c83.jpg"
                ><figcaption>1655899178-f039f51cb6c66a067487eb6aacf97c83.jpg</figcaption></figure></p>
]]></content>
      <categories>
        <category>Talks</category>
      </categories>
      <tags>
        <tag>ipad</tag>
        <tag>Apple</tag>
        <tag>Freshman</tag>
      </tags>
  </entry>
</search>
